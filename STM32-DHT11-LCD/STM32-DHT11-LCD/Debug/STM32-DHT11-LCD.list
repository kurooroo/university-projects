
STM32-DHT11-LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002edc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002fe8  08002fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003060  08003060  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003060  08003060  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003060  08003060  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000070  080030d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080030d8  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c65e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b9b  00000000  00000000  0002c6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  0002e298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  0002ef18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b41  00000000  00000000  0002fae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe5a  00000000  00000000  00047629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008abdf  00000000  00000000  00057483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2062  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000389c  00000000  00000000  000e20b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fd0 	.word	0x08002fd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002fd0 	.word	0x08002fd0

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f001 f8ed 	bl	8001378 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	2000009c 	.word	0x2000009c

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	214e      	movs	r1, #78	; 0x4e
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f001 f8bd 	bl	8001378 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	2000009c 	.word	0x2000009c

0800020c <lcd_init>:

void lcd_init (void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000210:	2032      	movs	r0, #50	; 0x32
 8000212:	f000 fcb1 	bl	8000b78 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000216:	2030      	movs	r0, #48	; 0x30
 8000218:	f7ff ff98 	bl	800014c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800021c:	2005      	movs	r0, #5
 800021e:	f000 fcab 	bl	8000b78 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000222:	2030      	movs	r0, #48	; 0x30
 8000224:	f7ff ff92 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000228:	2001      	movs	r0, #1
 800022a:	f000 fca5 	bl	8000b78 <HAL_Delay>
	lcd_send_cmd (0x30);
 800022e:	2030      	movs	r0, #48	; 0x30
 8000230:	f7ff ff8c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 8000234:	200a      	movs	r0, #10
 8000236:	f000 fc9f 	bl	8000b78 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800023a:	2020      	movs	r0, #32
 800023c:	f7ff ff86 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 8000240:	200a      	movs	r0, #10
 8000242:	f000 fc99 	bl	8000b78 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000246:	2028      	movs	r0, #40	; 0x28
 8000248:	f7ff ff80 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 800024c:	2001      	movs	r0, #1
 800024e:	f000 fc93 	bl	8000b78 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000252:	2008      	movs	r0, #8
 8000254:	f7ff ff7a 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000258:	2001      	movs	r0, #1
 800025a:	f000 fc8d 	bl	8000b78 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800025e:	2001      	movs	r0, #1
 8000260:	f7ff ff74 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000264:	2001      	movs	r0, #1
 8000266:	f000 fc87 	bl	8000b78 <HAL_Delay>
	HAL_Delay(1);
 800026a:	2001      	movs	r0, #1
 800026c:	f000 fc84 	bl	8000b78 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000270:	2006      	movs	r0, #6
 8000272:	f7ff ff6b 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f000 fc7e 	bl	8000b78 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800027c:	200c      	movs	r0, #12
 800027e:	f7ff ff65 	bl	800014c <lcd_send_cmd>
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}

08000286 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000286:	b580      	push	{r7, lr}
 8000288:	b082      	sub	sp, #8
 800028a:	af00      	add	r7, sp, #0
 800028c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800028e:	e006      	b.n	800029e <lcd_send_string+0x18>
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	1c5a      	adds	r2, r3, #1
 8000294:	607a      	str	r2, [r7, #4]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	4618      	mov	r0, r3
 800029a:	f7ff ff87 	bl	80001ac <lcd_send_data>
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d1f4      	bne.n	8000290 <lcd_send_string+0xa>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	3708      	adds	r7, #8
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <lcd_clear_display>:

void lcd_clear_display (void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80002b6:	2080      	movs	r0, #128	; 0x80
 80002b8:	f7ff ff48 	bl	800014c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80002bc:	2300      	movs	r3, #0
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	e005      	b.n	80002ce <lcd_clear_display+0x1e>
	{
		lcd_send_data (' ');
 80002c2:	2020      	movs	r0, #32
 80002c4:	f7ff ff72 	bl	80001ac <lcd_send_data>
	for (int i=0; i<70; i++)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3301      	adds	r3, #1
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2b45      	cmp	r3, #69	; 0x45
 80002d2:	ddf6      	ble.n	80002c2 <lcd_clear_display+0x12>
	}
}
 80002d4:	bf00      	nop
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}

080002de <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b082      	sub	sp, #8
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
 80002e6:	6039      	str	r1, [r7, #0]
	switch (row)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d003      	beq.n	80002f6 <lcd_goto_XY+0x18>
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d005      	beq.n	8000300 <lcd_goto_XY+0x22>
 80002f4:	e009      	b.n	800030a <lcd_goto_XY+0x2c>
    {
        case 0:
            col |= 0x80;
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002fc:	603b      	str	r3, [r7, #0]
            break;
 80002fe:	e004      	b.n	800030a <lcd_goto_XY+0x2c>
        case 1:
            col |= 0xC0;
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000306:	603b      	str	r3, [r7, #0]
            break;
 8000308:	bf00      	nop
    }

    lcd_send_cmd (col);
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	b2db      	uxtb	r3, r3
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ff1c 	bl	800014c <lcd_send_cmd>
}
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <DHT11_GpioInput>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void DHT11_GpioInput(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000322:	463b      	mov	r3, r7
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	605a      	str	r2, [r3, #4]
 800032a:	609a      	str	r2, [r3, #8]
 800032c:	60da      	str	r2, [r3, #12]
  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800032e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000332:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000334:	2300      	movs	r3, #0
 8000336:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000338:	2301      	movs	r3, #1
 800033a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800033c:	463b      	mov	r3, r7
 800033e:	4619      	mov	r1, r3
 8000340:	4803      	ldr	r0, [pc, #12]	; (8000350 <DHT11_GpioInput+0x34>)
 8000342:	f000 fd21 	bl	8000d88 <HAL_GPIO_Init>
}
 8000346:	bf00      	nop
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40011000 	.word	0x40011000

08000354 <DHT11_GpioOutput>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void DHT11_GpioOutput(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	463b      	mov	r3, r7
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
 8000362:	609a      	str	r2, [r3, #8]
 8000364:	60da      	str	r2, [r3, #12]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800036c:	480a      	ldr	r0, [pc, #40]	; (8000398 <DHT11_GpioOutput+0x44>)
 800036e:	f000 fea6 	bl	80010be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000376:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000378:	2301      	movs	r3, #1
 800037a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000380:	2303      	movs	r3, #3
 8000382:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000384:	463b      	mov	r3, r7
 8000386:	4619      	mov	r1, r3
 8000388:	4803      	ldr	r0, [pc, #12]	; (8000398 <DHT11_GpioOutput+0x44>)
 800038a:	f000 fcfd 	bl	8000d88 <HAL_GPIO_Init>
  // GPIO_InitStruct.Pin = GPIO_PIN_14;
  // GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  // GPIO_InitStruct.Pull = GPIO_NOPULL;
  // GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  // HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
}
 800038e:	bf00      	nop
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40011000 	.word	0x40011000

0800039c <TIM1_DelayUs>:

void TIM1_DelayUs(uint16_t us)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80003a6:	4b09      	ldr	r3, [pc, #36]	; (80003cc <TIM1_DelayUs+0x30>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2200      	movs	r2, #0
 80003ac:	625a      	str	r2, [r3, #36]	; 0x24
  while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < us)
 80003ae:	bf00      	nop
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <TIM1_DelayUs+0x30>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	88fa      	ldrh	r2, [r7, #6]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d8f8      	bhi.n	80003b0 <TIM1_DelayUs+0x14>
    ;
}
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	200000f4 	.word	0x200000f4

080003d0 <DHT11_SendStart>:

void DHT11_SendStart(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  DHT11_GpioOutput();
 80003d4:	f7ff ffbe 	bl	8000354 <DHT11_GpioOutput>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003de:	4809      	ldr	r0, [pc, #36]	; (8000404 <DHT11_SendStart+0x34>)
 80003e0:	f000 fe6d 	bl	80010be <HAL_GPIO_WritePin>
  HAL_Delay(18);
 80003e4:	2012      	movs	r0, #18
 80003e6:	f000 fbc7 	bl	8000b78 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f0:	4804      	ldr	r0, [pc, #16]	; (8000404 <DHT11_SendStart+0x34>)
 80003f2:	f000 fe64 	bl	80010be <HAL_GPIO_WritePin>
  TIM1_DelayUs(20);
 80003f6:	2014      	movs	r0, #20
 80003f8:	f7ff ffd0 	bl	800039c <TIM1_DelayUs>
  DHT11_GpioInput();
 80003fc:	f7ff ff8e 	bl	800031c <DHT11_GpioInput>
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40011000 	.word	0x40011000

08000408 <DHT11_CheckRespone>:

uint8_t DHT11_CheckRespone(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
  uint8_t respone = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	71fb      	strb	r3, [r7, #7]
  TIM1_DelayUs(40);
 8000412:	2028      	movs	r0, #40	; 0x28
 8000414:	f7ff ffc2 	bl	800039c <TIM1_DelayUs>
  if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000418:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800041c:	4811      	ldr	r0, [pc, #68]	; (8000464 <DHT11_CheckRespone+0x5c>)
 800041e:	f000 fe37 	bl	8001090 <HAL_GPIO_ReadPin>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d10f      	bne.n	8000448 <DHT11_CheckRespone+0x40>
  {
    TIM1_DelayUs(80);
 8000428:	2050      	movs	r0, #80	; 0x50
 800042a:	f7ff ffb7 	bl	800039c <TIM1_DelayUs>
    if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)))
 800042e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000432:	480c      	ldr	r0, [pc, #48]	; (8000464 <DHT11_CheckRespone+0x5c>)
 8000434:	f000 fe2c 	bl	8001090 <HAL_GPIO_ReadPin>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d002      	beq.n	8000444 <DHT11_CheckRespone+0x3c>
    {
      respone = 1;
 800043e:	2301      	movs	r3, #1
 8000440:	71fb      	strb	r3, [r7, #7]
 8000442:	e001      	b.n	8000448 <DHT11_CheckRespone+0x40>
    }
    else
    {
      respone = -1;
 8000444:	23ff      	movs	r3, #255	; 0xff
 8000446:	71fb      	strb	r3, [r7, #7]
    }
  }
  while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000448:	bf00      	nop
 800044a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800044e:	4805      	ldr	r0, [pc, #20]	; (8000464 <DHT11_CheckRespone+0x5c>)
 8000450:	f000 fe1e 	bl	8001090 <HAL_GPIO_ReadPin>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d1f7      	bne.n	800044a <DHT11_CheckRespone+0x42>
    ;
  return respone;
 800045a:	79fb      	ldrb	r3, [r7, #7]
}
 800045c:	4618      	mov	r0, r3
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40011000 	.word	0x40011000

08000468 <DHT11_ReadByte>:

uint8_t DHT11_ReadByte(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
  uint8_t ret = 0, i;
 800046e:	2300      	movs	r3, #0
 8000470:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++)
 8000472:	2300      	movs	r3, #0
 8000474:	71bb      	strb	r3, [r7, #6]
 8000476:	e03a      	b.n	80004ee <DHT11_ReadByte+0x86>
  {
    while (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000478:	bf00      	nop
 800047a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047e:	4820      	ldr	r0, [pc, #128]	; (8000500 <DHT11_ReadByte+0x98>)
 8000480:	f000 fe06 	bl	8001090 <HAL_GPIO_ReadPin>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d0f7      	beq.n	800047a <DHT11_ReadByte+0x12>
      ;
    TIM1_DelayUs(40);
 800048a:	2028      	movs	r0, #40	; 0x28
 800048c:	f7ff ff86 	bl	800039c <TIM1_DelayUs>
    if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000490:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000494:	481a      	ldr	r0, [pc, #104]	; (8000500 <DHT11_ReadByte+0x98>)
 8000496:	f000 fdfb 	bl	8001090 <HAL_GPIO_ReadPin>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d10e      	bne.n	80004be <DHT11_ReadByte+0x56>
    {
      ret &= ~(1 << (7 - i));
 80004a0:	79bb      	ldrb	r3, [r7, #6]
 80004a2:	f1c3 0307 	rsb	r3, r3, #7
 80004a6:	2201      	movs	r2, #1
 80004a8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ac:	b25b      	sxtb	r3, r3
 80004ae:	43db      	mvns	r3, r3
 80004b0:	b25a      	sxtb	r2, r3
 80004b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b6:	4013      	ands	r3, r2
 80004b8:	b25b      	sxtb	r3, r3
 80004ba:	71fb      	strb	r3, [r7, #7]
 80004bc:	e00b      	b.n	80004d6 <DHT11_ReadByte+0x6e>
    }
    else
    {
      ret |= (1 << (7 - i));
 80004be:	79bb      	ldrb	r3, [r7, #6]
 80004c0:	f1c3 0307 	rsb	r3, r3, #7
 80004c4:	2201      	movs	r2, #1
 80004c6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ca:	b25a      	sxtb	r2, r3
 80004cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d0:	4313      	orrs	r3, r2
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	71fb      	strb	r3, [r7, #7]
    }
    while ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)))
 80004d6:	bf00      	nop
 80004d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004dc:	4808      	ldr	r0, [pc, #32]	; (8000500 <DHT11_ReadByte+0x98>)
 80004de:	f000 fdd7 	bl	8001090 <HAL_GPIO_ReadPin>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d1f7      	bne.n	80004d8 <DHT11_ReadByte+0x70>
  for (i = 0; i < 8; i++)
 80004e8:	79bb      	ldrb	r3, [r7, #6]
 80004ea:	3301      	adds	r3, #1
 80004ec:	71bb      	strb	r3, [r7, #6]
 80004ee:	79bb      	ldrb	r3, [r7, #6]
 80004f0:	2b07      	cmp	r3, #7
 80004f2:	d9c1      	bls.n	8000478 <DHT11_ReadByte+0x10>
      ;
  }
  return ret;
 80004f4:	79fb      	ldrb	r3, [r7, #7]
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40011000 	.word	0x40011000

08000504 <DHT11_ReadSensor>:

void DHT11_ReadSensor(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  // uint8_t hByte1, hByte2, tByte1,tByte2, presence;
  // uint16_t humid, checksum, temp;
  DHT11_SendStart();
 8000508:	f7ff ff62 	bl	80003d0 <DHT11_SendStart>
  presence = DHT11_CheckRespone();
 800050c:	f7ff ff7c 	bl	8000408 <DHT11_CheckRespone>
 8000510:	4603      	mov	r3, r0
 8000512:	461a      	mov	r2, r3
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <DHT11_ReadSensor+0x64>)
 8000516:	701a      	strb	r2, [r3, #0]
  hByte1 = DHT11_ReadByte();
 8000518:	f7ff ffa6 	bl	8000468 <DHT11_ReadByte>
 800051c:	4603      	mov	r3, r0
 800051e:	461a      	mov	r2, r3
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <DHT11_ReadSensor+0x68>)
 8000522:	701a      	strb	r2, [r3, #0]
  hByte2 = DHT11_ReadByte();
 8000524:	f7ff ffa0 	bl	8000468 <DHT11_ReadByte>
 8000528:	4603      	mov	r3, r0
 800052a:	461a      	mov	r2, r3
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <DHT11_ReadSensor+0x6c>)
 800052e:	701a      	strb	r2, [r3, #0]
  tByte1 = DHT11_ReadByte();
 8000530:	f7ff ff9a 	bl	8000468 <DHT11_ReadByte>
 8000534:	4603      	mov	r3, r0
 8000536:	461a      	mov	r2, r3
 8000538:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <DHT11_ReadSensor+0x70>)
 800053a:	701a      	strb	r2, [r3, #0]
  tByte2 = DHT11_ReadByte();
 800053c:	f7ff ff94 	bl	8000468 <DHT11_ReadByte>
 8000540:	4603      	mov	r3, r0
 8000542:	461a      	mov	r2, r3
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <DHT11_ReadSensor+0x74>)
 8000546:	701a      	strb	r2, [r3, #0]
  checksum = DHT11_ReadByte();
 8000548:	f7ff ff8e 	bl	8000468 <DHT11_ReadByte>
 800054c:	4603      	mov	r3, r0
 800054e:	461a      	mov	r2, r3
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <DHT11_ReadSensor+0x78>)
 8000552:	701a      	strb	r2, [r3, #0]
  DHT11_Temperature = tByte1;
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <DHT11_ReadSensor+0x70>)
 8000556:	781a      	ldrb	r2, [r3, #0]
 8000558:	4b09      	ldr	r3, [pc, #36]	; (8000580 <DHT11_ReadSensor+0x7c>)
 800055a:	701a      	strb	r2, [r3, #0]
  DHT11_Humidity = hByte1;
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <DHT11_ReadSensor+0x68>)
 800055e:	781a      	ldrb	r2, [r3, #0]
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <DHT11_ReadSensor+0x80>)
 8000562:	701a      	strb	r2, [r3, #0]
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	200000f0 	.word	0x200000f0
 800056c:	2000013c 	.word	0x2000013c
 8000570:	2000013d 	.word	0x2000013d
 8000574:	200000f1 	.word	0x200000f1
 8000578:	2000013e 	.word	0x2000013e
 800057c:	2000013f 	.word	0x2000013f
 8000580:	2000008c 	.word	0x2000008c
 8000584:	2000008d 	.word	0x2000008d

08000588 <LCD_Display>:
/*********************************DHT11****************************************/

/*********************************LCD****************************************/
void LCD_Display(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  char tempString[4];
  lcd_clear_display();
 800058e:	f7ff fe8f 	bl	80002b0 <lcd_clear_display>
  lcd_goto_XY(0, 0);
 8000592:	2100      	movs	r1, #0
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff fea2 	bl	80002de <lcd_goto_XY>
  lcd_send_string("Temp: ");
 800059a:	4816      	ldr	r0, [pc, #88]	; (80005f4 <LCD_Display+0x6c>)
 800059c:	f7ff fe73 	bl	8000286 <lcd_send_string>
  sprintf(tempString, "%u", DHT11_Temperature);
 80005a0:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <LCD_Display+0x70>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	4914      	ldr	r1, [pc, #80]	; (80005fc <LCD_Display+0x74>)
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 f8d6 	bl	800275c <siprintf>
  lcd_send_string(tempString);
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff fe67 	bl	8000286 <lcd_send_string>
  lcd_send_string(" oC");
 80005b8:	4811      	ldr	r0, [pc, #68]	; (8000600 <LCD_Display+0x78>)
 80005ba:	f7ff fe64 	bl	8000286 <lcd_send_string>
  lcd_goto_XY(1,0);
 80005be:	2100      	movs	r1, #0
 80005c0:	2001      	movs	r0, #1
 80005c2:	f7ff fe8c 	bl	80002de <lcd_goto_XY>
  lcd_send_string("Humid: ");
 80005c6:	480f      	ldr	r0, [pc, #60]	; (8000604 <LCD_Display+0x7c>)
 80005c8:	f7ff fe5d 	bl	8000286 <lcd_send_string>
  sprintf(tempString, "%u", DHT11_Humidity);
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <LCD_Display+0x80>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4909      	ldr	r1, [pc, #36]	; (80005fc <LCD_Display+0x74>)
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 f8c0 	bl	800275c <siprintf>
  lcd_send_string(tempString);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff fe51 	bl	8000286 <lcd_send_string>
  lcd_send_string(" %");
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <LCD_Display+0x84>)
 80005e6:	f7ff fe4e 	bl	8000286 <lcd_send_string>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	08002fe8 	.word	0x08002fe8
 80005f8:	2000008c 	.word	0x2000008c
 80005fc:	08002ff0 	.word	0x08002ff0
 8000600:	08002ff4 	.word	0x08002ff4
 8000604:	08002ff8 	.word	0x08002ff8
 8000608:	2000008d 	.word	0x2000008d
 800060c:	08003000 	.word	0x08003000

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fa4e 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f81a 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 f8dc 	bl	80007d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000620:	f000 f85c 	bl	80006dc <MX_I2C1_Init>
  MX_TIM1_Init();
 8000624:	f000 f888 	bl	8000738 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000628:	4808      	ldr	r0, [pc, #32]	; (800064c <main+0x3c>)
 800062a:	f001 fe01 	bl	8002230 <HAL_TIM_Base_Start>
  HAL_Delay(1000);
 800062e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000632:	f000 faa1 	bl	8000b78 <HAL_Delay>
  lcd_init();
 8000636:	f7ff fde9 	bl	800020c <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    DHT11_ReadSensor();
 800063a:	f7ff ff63 	bl	8000504 <DHT11_ReadSensor>
    LCD_Display();
 800063e:	f7ff ffa3 	bl	8000588 <LCD_Display>
    HAL_Delay(2000);
 8000642:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000646:	f000 fa97 	bl	8000b78 <HAL_Delay>
    DHT11_ReadSensor();
 800064a:	e7f6      	b.n	800063a <main+0x2a>
 800064c:	200000f4 	.word	0x200000f4

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b090      	sub	sp, #64	; 0x40
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0318 	add.w	r3, r7, #24
 800065a:	2228      	movs	r2, #40	; 0x28
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f002 f874 	bl	800274c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000672:	2301      	movs	r3, #1
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800068e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0318 	add.w	r3, r7, #24
 8000698:	4618      	mov	r0, r3
 800069a:	f001 f973 	bl	8001984 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006a4:	f000 f8e8 	bl	8000878 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80006a8:	230f      	movs	r3, #15
 80006aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2102      	movs	r1, #2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fbde 	bl	8001e84 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006ce:	f000 f8d3 	bl	8000878 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3740      	adds	r7, #64	; 0x40
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_I2C1_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <MX_I2C1_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_I2C1_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_I2C1_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_I2C1_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_I2C1_Init+0x50>)
 800071a:	f000 fce9 	bl	80010f0 <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 f8a8 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2000009c 	.word	0x2000009c
 8000730:	40005400 	.word	0x40005400
 8000734:	000186a0 	.word	0x000186a0

08000738 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074c:	463b      	mov	r3, r7
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000754:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_TIM1_Init+0x98>)
 8000756:	4a1f      	ldr	r2, [pc, #124]	; (80007d4 <MX_TIM1_Init+0x9c>)
 8000758:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72 - 1;
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MX_TIM1_Init+0x98>)
 800075c:	2247      	movs	r2, #71	; 0x47
 800075e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_TIM1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff - 1;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_TIM1_Init+0x98>)
 8000768:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800076c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_TIM1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_TIM1_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_TIM1_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000780:	4813      	ldr	r0, [pc, #76]	; (80007d0 <MX_TIM1_Init+0x98>)
 8000782:	f001 fd05 	bl	8002190 <HAL_TIM_Base_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800078c:	f000 f874 	bl	8000878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000794:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	4619      	mov	r1, r3
 800079c:	480c      	ldr	r0, [pc, #48]	; (80007d0 <MX_TIM1_Init+0x98>)
 800079e:	f001 fd91 	bl	80022c4 <HAL_TIM_ConfigClockSource>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80007a8:	f000 f866 	bl	8000878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ac:	2300      	movs	r3, #0
 80007ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007b4:	463b      	mov	r3, r7
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_TIM1_Init+0x98>)
 80007ba:	f001 ff3f 	bl	800263c <HAL_TIMEx_MasterConfigSynchronization>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007c4:	f000 f858 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 80007c8:	bf00      	nop
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000f4 	.word	0x200000f4
 80007d4:	40012c00 	.word	0x40012c00

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ec:	4b20      	ldr	r3, [pc, #128]	; (8000870 <MX_GPIO_Init+0x98>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a1f      	ldr	r2, [pc, #124]	; (8000870 <MX_GPIO_Init+0x98>)
 80007f2:	f043 0310 	orr.w	r3, r3, #16
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <MX_GPIO_Init+0x98>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0310 	and.w	r3, r3, #16
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_GPIO_Init+0x98>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a19      	ldr	r2, [pc, #100]	; (8000870 <MX_GPIO_Init+0x98>)
 800080a:	f043 0320 	orr.w	r3, r3, #32
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_GPIO_Init+0x98>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0320 	and.w	r3, r3, #32
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_GPIO_Init+0x98>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a13      	ldr	r2, [pc, #76]	; (8000870 <MX_GPIO_Init+0x98>)
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_GPIO_Init+0x98>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_GPIO_Init+0x98>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <MX_GPIO_Init+0x98>)
 800083a:	f043 0308 	orr.w	r3, r3, #8
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_GPIO_Init+0x98>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0308 	and.w	r3, r3, #8
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800084c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000856:	2301      	movs	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	4619      	mov	r1, r3
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_GPIO_Init+0x9c>)
 8000862:	f000 fa91 	bl	8000d88 <HAL_GPIO_Init>
}
 8000866:	bf00      	nop
 8000868:	3720      	adds	r7, #32
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000
 8000874:	40011000 	.word	0x40011000

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_MspInit+0x5c>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <HAL_MspInit+0x5c>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6193      	str	r3, [r2, #24]
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_MspInit+0x5c>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <HAL_MspInit+0x5c>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <HAL_MspInit+0x5c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	61d3      	str	r3, [r2, #28]
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_MspInit+0x5c>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <HAL_MspInit+0x60>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <HAL_MspInit+0x60>)
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40010000 	.word	0x40010000

080008e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a15      	ldr	r2, [pc, #84]	; (8000958 <HAL_I2C_MspInit+0x70>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d123      	bne.n	8000950 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <HAL_I2C_MspInit+0x74>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a13      	ldr	r2, [pc, #76]	; (800095c <HAL_I2C_MspInit+0x74>)
 800090e:	f043 0308 	orr.w	r3, r3, #8
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <HAL_I2C_MspInit+0x74>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f003 0308 	and.w	r3, r3, #8
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000920:	23c0      	movs	r3, #192	; 0xc0
 8000922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000924:	2312      	movs	r3, #18
 8000926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	4619      	mov	r1, r3
 8000932:	480b      	ldr	r0, [pc, #44]	; (8000960 <HAL_I2C_MspInit+0x78>)
 8000934:	f000 fa28 	bl	8000d88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_I2C_MspInit+0x74>)
 800093a:	69db      	ldr	r3, [r3, #28]
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <HAL_I2C_MspInit+0x74>)
 800093e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000942:	61d3      	str	r3, [r2, #28]
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <HAL_I2C_MspInit+0x74>)
 8000946:	69db      	ldr	r3, [r3, #28]
 8000948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000950:	bf00      	nop
 8000952:	3720      	adds	r7, #32
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40005400 	.word	0x40005400
 800095c:	40021000 	.word	0x40021000
 8000960:	40010c00 	.word	0x40010c00

08000964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a09      	ldr	r2, [pc, #36]	; (8000998 <HAL_TIM_Base_MspInit+0x34>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d10b      	bne.n	800098e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_TIM_Base_MspInit+0x38>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_TIM_Base_MspInit+0x38>)
 800097c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000980:	6193      	str	r3, [r2, #24]
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_TIM_Base_MspInit+0x38>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	40012c00 	.word	0x40012c00
 800099c:	40021000 	.word	0x40021000

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr

080009ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr

080009e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e6:	f000 f8ab 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f8:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <_sbrk+0x5c>)
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <_sbrk+0x60>)
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d102      	bne.n	8000a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <_sbrk+0x64>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <_sbrk+0x68>)
 8000a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d207      	bcs.n	8000a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a20:	f001 fe6a 	bl	80026f8 <__errno>
 8000a24:	4603      	mov	r3, r0
 8000a26:	220c      	movs	r2, #12
 8000a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	e009      	b.n	8000a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <_sbrk+0x64>)
 8000a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a42:	68fb      	ldr	r3, [r7, #12]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20005000 	.word	0x20005000
 8000a50:	00000400 	.word	0x00000400
 8000a54:	20000090 	.word	0x20000090
 8000a58:	20000158 	.word	0x20000158

08000a5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a6a:	490d      	ldr	r1, [pc, #52]	; (8000aa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a80:	4c0a      	ldr	r4, [pc, #40]	; (8000aac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a8e:	f7ff ffe5 	bl	8000a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a92:	f001 fe37 	bl	8002704 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a96:	f7ff fdbb 	bl	8000610 <main>
  bx lr
 8000a9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000aa4:	08003068 	.word	0x08003068
  ldr r2, =_sbss
 8000aa8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000aac:	20000154 	.word	0x20000154

08000ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_2_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_Init+0x28>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_Init+0x28>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 f92b 	bl	8000d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 f808 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff fed8 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40022000 	.word	0x40022000

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x54>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x58>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f935 	bl	8000d6e <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00e      	b.n	8000b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d80a      	bhi.n	8000b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f000 f90b 	bl	8000d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_InitTick+0x5c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x1c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x20>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <HAL_IncTick+0x20>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000140 	.word	0x20000140

08000b64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <HAL_GetTick+0x10>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	20000140 	.word	0x20000140

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff fff0 	bl	8000b64 <HAL_GetTick>
 8000b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_Delay+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9e:	bf00      	nop
 8000ba0:	f7ff ffe0 	bl	8000b64 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008

08000bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	60d3      	str	r3, [r2, #12]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <__NVIC_GetPriorityGrouping+0x18>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	f003 0307 	and.w	r3, r3, #7
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db0a      	blt.n	8000c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	490c      	ldr	r1, [pc, #48]	; (8000c70 <__NVIC_SetPriority+0x4c>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	440b      	add	r3, r1
 8000c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c4c:	e00a      	b.n	8000c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4908      	ldr	r1, [pc, #32]	; (8000c74 <__NVIC_SetPriority+0x50>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	3b04      	subs	r3, #4
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	440b      	add	r3, r1
 8000c62:	761a      	strb	r2, [r3, #24]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	; 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f1c3 0307 	rsb	r3, r3, #7
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	bf28      	it	cs
 8000c96:	2304      	movcs	r3, #4
 8000c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d902      	bls.n	8000ca8 <NVIC_EncodePriority+0x30>
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	e000      	b.n	8000caa <NVIC_EncodePriority+0x32>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	401a      	ands	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43d9      	mvns	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	4313      	orrs	r3, r2
         );
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3724      	adds	r7, #36	; 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cec:	d301      	bcc.n	8000cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00f      	b.n	8000d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <SysTick_Config+0x40>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f7ff ff90 	bl	8000c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <SysTick_Config+0x40>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0a:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SysTick_Config+0x40>)
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ff49 	bl	8000bc0 <__NVIC_SetPriorityGrouping>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d48:	f7ff ff5e 	bl	8000c08 <__NVIC_GetPriorityGrouping>
 8000d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	6978      	ldr	r0, [r7, #20]
 8000d54:	f7ff ff90 	bl	8000c78 <NVIC_EncodePriority>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff5f 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ffb0 	bl	8000cdc <SysTick_Config>
 8000d7c:	4603      	mov	r3, r0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b08b      	sub	sp, #44	; 0x2c
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9a:	e169      	b.n	8001070 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	69fa      	ldr	r2, [r7, #28]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	f040 8158 	bne.w	800106a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	4a9a      	ldr	r2, [pc, #616]	; (8001028 <HAL_GPIO_Init+0x2a0>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d05e      	beq.n	8000e82 <HAL_GPIO_Init+0xfa>
 8000dc4:	4a98      	ldr	r2, [pc, #608]	; (8001028 <HAL_GPIO_Init+0x2a0>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d875      	bhi.n	8000eb6 <HAL_GPIO_Init+0x12e>
 8000dca:	4a98      	ldr	r2, [pc, #608]	; (800102c <HAL_GPIO_Init+0x2a4>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d058      	beq.n	8000e82 <HAL_GPIO_Init+0xfa>
 8000dd0:	4a96      	ldr	r2, [pc, #600]	; (800102c <HAL_GPIO_Init+0x2a4>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d86f      	bhi.n	8000eb6 <HAL_GPIO_Init+0x12e>
 8000dd6:	4a96      	ldr	r2, [pc, #600]	; (8001030 <HAL_GPIO_Init+0x2a8>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d052      	beq.n	8000e82 <HAL_GPIO_Init+0xfa>
 8000ddc:	4a94      	ldr	r2, [pc, #592]	; (8001030 <HAL_GPIO_Init+0x2a8>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d869      	bhi.n	8000eb6 <HAL_GPIO_Init+0x12e>
 8000de2:	4a94      	ldr	r2, [pc, #592]	; (8001034 <HAL_GPIO_Init+0x2ac>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d04c      	beq.n	8000e82 <HAL_GPIO_Init+0xfa>
 8000de8:	4a92      	ldr	r2, [pc, #584]	; (8001034 <HAL_GPIO_Init+0x2ac>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d863      	bhi.n	8000eb6 <HAL_GPIO_Init+0x12e>
 8000dee:	4a92      	ldr	r2, [pc, #584]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d046      	beq.n	8000e82 <HAL_GPIO_Init+0xfa>
 8000df4:	4a90      	ldr	r2, [pc, #576]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d85d      	bhi.n	8000eb6 <HAL_GPIO_Init+0x12e>
 8000dfa:	2b12      	cmp	r3, #18
 8000dfc:	d82a      	bhi.n	8000e54 <HAL_GPIO_Init+0xcc>
 8000dfe:	2b12      	cmp	r3, #18
 8000e00:	d859      	bhi.n	8000eb6 <HAL_GPIO_Init+0x12e>
 8000e02:	a201      	add	r2, pc, #4	; (adr r2, 8000e08 <HAL_GPIO_Init+0x80>)
 8000e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e08:	08000e83 	.word	0x08000e83
 8000e0c:	08000e5d 	.word	0x08000e5d
 8000e10:	08000e6f 	.word	0x08000e6f
 8000e14:	08000eb1 	.word	0x08000eb1
 8000e18:	08000eb7 	.word	0x08000eb7
 8000e1c:	08000eb7 	.word	0x08000eb7
 8000e20:	08000eb7 	.word	0x08000eb7
 8000e24:	08000eb7 	.word	0x08000eb7
 8000e28:	08000eb7 	.word	0x08000eb7
 8000e2c:	08000eb7 	.word	0x08000eb7
 8000e30:	08000eb7 	.word	0x08000eb7
 8000e34:	08000eb7 	.word	0x08000eb7
 8000e38:	08000eb7 	.word	0x08000eb7
 8000e3c:	08000eb7 	.word	0x08000eb7
 8000e40:	08000eb7 	.word	0x08000eb7
 8000e44:	08000eb7 	.word	0x08000eb7
 8000e48:	08000eb7 	.word	0x08000eb7
 8000e4c:	08000e65 	.word	0x08000e65
 8000e50:	08000e79 	.word	0x08000e79
 8000e54:	4a79      	ldr	r2, [pc, #484]	; (800103c <HAL_GPIO_Init+0x2b4>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d013      	beq.n	8000e82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e5a:	e02c      	b.n	8000eb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	623b      	str	r3, [r7, #32]
          break;
 8000e62:	e029      	b.n	8000eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	623b      	str	r3, [r7, #32]
          break;
 8000e6c:	e024      	b.n	8000eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	3308      	adds	r3, #8
 8000e74:	623b      	str	r3, [r7, #32]
          break;
 8000e76:	e01f      	b.n	8000eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	330c      	adds	r3, #12
 8000e7e:	623b      	str	r3, [r7, #32]
          break;
 8000e80:	e01a      	b.n	8000eb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d102      	bne.n	8000e90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	623b      	str	r3, [r7, #32]
          break;
 8000e8e:	e013      	b.n	8000eb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d105      	bne.n	8000ea4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e98:	2308      	movs	r3, #8
 8000e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69fa      	ldr	r2, [r7, #28]
 8000ea0:	611a      	str	r2, [r3, #16]
          break;
 8000ea2:	e009      	b.n	8000eb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ea4:	2308      	movs	r3, #8
 8000ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69fa      	ldr	r2, [r7, #28]
 8000eac:	615a      	str	r2, [r3, #20]
          break;
 8000eae:	e003      	b.n	8000eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
          break;
 8000eb4:	e000      	b.n	8000eb8 <HAL_GPIO_Init+0x130>
          break;
 8000eb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	2bff      	cmp	r3, #255	; 0xff
 8000ebc:	d801      	bhi.n	8000ec2 <HAL_GPIO_Init+0x13a>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	e001      	b.n	8000ec6 <HAL_GPIO_Init+0x13e>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	2bff      	cmp	r3, #255	; 0xff
 8000ecc:	d802      	bhi.n	8000ed4 <HAL_GPIO_Init+0x14c>
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	e002      	b.n	8000eda <HAL_GPIO_Init+0x152>
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	3b08      	subs	r3, #8
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	210f      	movs	r1, #15
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	401a      	ands	r2, r3
 8000eec:	6a39      	ldr	r1, [r7, #32]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 80b1 	beq.w	800106a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f08:	4b4d      	ldr	r3, [pc, #308]	; (8001040 <HAL_GPIO_Init+0x2b8>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a4c      	ldr	r2, [pc, #304]	; (8001040 <HAL_GPIO_Init+0x2b8>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b4a      	ldr	r3, [pc, #296]	; (8001040 <HAL_GPIO_Init+0x2b8>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f20:	4a48      	ldr	r2, [pc, #288]	; (8001044 <HAL_GPIO_Init+0x2bc>)
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	3302      	adds	r3, #2
 8000f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	4013      	ands	r3, r2
 8000f42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a40      	ldr	r2, [pc, #256]	; (8001048 <HAL_GPIO_Init+0x2c0>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d013      	beq.n	8000f74 <HAL_GPIO_Init+0x1ec>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a3f      	ldr	r2, [pc, #252]	; (800104c <HAL_GPIO_Init+0x2c4>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d00d      	beq.n	8000f70 <HAL_GPIO_Init+0x1e8>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a3e      	ldr	r2, [pc, #248]	; (8001050 <HAL_GPIO_Init+0x2c8>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d007      	beq.n	8000f6c <HAL_GPIO_Init+0x1e4>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a3d      	ldr	r2, [pc, #244]	; (8001054 <HAL_GPIO_Init+0x2cc>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d101      	bne.n	8000f68 <HAL_GPIO_Init+0x1e0>
 8000f64:	2303      	movs	r3, #3
 8000f66:	e006      	b.n	8000f76 <HAL_GPIO_Init+0x1ee>
 8000f68:	2304      	movs	r3, #4
 8000f6a:	e004      	b.n	8000f76 <HAL_GPIO_Init+0x1ee>
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	e002      	b.n	8000f76 <HAL_GPIO_Init+0x1ee>
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <HAL_GPIO_Init+0x1ee>
 8000f74:	2300      	movs	r3, #0
 8000f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f78:	f002 0203 	and.w	r2, r2, #3
 8000f7c:	0092      	lsls	r2, r2, #2
 8000f7e:	4093      	lsls	r3, r2
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f86:	492f      	ldr	r1, [pc, #188]	; (8001044 <HAL_GPIO_Init+0x2bc>)
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d006      	beq.n	8000fae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fa0:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	492c      	ldr	r1, [pc, #176]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	600b      	str	r3, [r1, #0]
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	4928      	ldr	r1, [pc, #160]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d006      	beq.n	8000fd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fc8:	4b23      	ldr	r3, [pc, #140]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	4922      	ldr	r1, [pc, #136]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	491e      	ldr	r1, [pc, #120]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d006      	beq.n	8000ffe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	4918      	ldr	r1, [pc, #96]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	608b      	str	r3, [r1, #8]
 8000ffc:	e006      	b.n	800100c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	43db      	mvns	r3, r3
 8001006:	4914      	ldr	r1, [pc, #80]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8001008:	4013      	ands	r3, r2
 800100a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d021      	beq.n	800105c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	490e      	ldr	r1, [pc, #56]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	60cb      	str	r3, [r1, #12]
 8001024:	e021      	b.n	800106a <HAL_GPIO_Init+0x2e2>
 8001026:	bf00      	nop
 8001028:	10320000 	.word	0x10320000
 800102c:	10310000 	.word	0x10310000
 8001030:	10220000 	.word	0x10220000
 8001034:	10210000 	.word	0x10210000
 8001038:	10120000 	.word	0x10120000
 800103c:	10110000 	.word	0x10110000
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000
 8001048:	40010800 	.word	0x40010800
 800104c:	40010c00 	.word	0x40010c00
 8001050:	40011000 	.word	0x40011000
 8001054:	40011400 	.word	0x40011400
 8001058:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <HAL_GPIO_Init+0x304>)
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	43db      	mvns	r3, r3
 8001064:	4909      	ldr	r1, [pc, #36]	; (800108c <HAL_GPIO_Init+0x304>)
 8001066:	4013      	ands	r3, r2
 8001068:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	3301      	adds	r3, #1
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	fa22 f303 	lsr.w	r3, r2, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	f47f ae8e 	bne.w	8000d9c <HAL_GPIO_Init+0x14>
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	372c      	adds	r7, #44	; 0x2c
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	40010400 	.word	0x40010400

08001090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	887b      	ldrh	r3, [r7, #2]
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e001      	b.n	80010b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	807b      	strh	r3, [r7, #2]
 80010ca:	4613      	mov	r3, r2
 80010cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ce:	787b      	ldrb	r3, [r7, #1]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010d4:	887a      	ldrh	r2, [r7, #2]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010da:	e003      	b.n	80010e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010dc:	887b      	ldrh	r3, [r7, #2]
 80010de:	041a      	lsls	r2, r3, #16
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	611a      	str	r2, [r3, #16]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
	...

080010f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e12b      	b.n	800135a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d106      	bne.n	800111c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fbe6 	bl	80008e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2224      	movs	r2, #36	; 0x24
 8001120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0201 	bic.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001142:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001152:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001154:	f000 ffea 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8001158:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	4a81      	ldr	r2, [pc, #516]	; (8001364 <HAL_I2C_Init+0x274>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d807      	bhi.n	8001174 <HAL_I2C_Init+0x84>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4a80      	ldr	r2, [pc, #512]	; (8001368 <HAL_I2C_Init+0x278>)
 8001168:	4293      	cmp	r3, r2
 800116a:	bf94      	ite	ls
 800116c:	2301      	movls	r3, #1
 800116e:	2300      	movhi	r3, #0
 8001170:	b2db      	uxtb	r3, r3
 8001172:	e006      	b.n	8001182 <HAL_I2C_Init+0x92>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4a7d      	ldr	r2, [pc, #500]	; (800136c <HAL_I2C_Init+0x27c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	bf94      	ite	ls
 800117c:	2301      	movls	r3, #1
 800117e:	2300      	movhi	r3, #0
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e0e7      	b.n	800135a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4a78      	ldr	r2, [pc, #480]	; (8001370 <HAL_I2C_Init+0x280>)
 800118e:	fba2 2303 	umull	r2, r3, r2, r3
 8001192:	0c9b      	lsrs	r3, r3, #18
 8001194:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4a6a      	ldr	r2, [pc, #424]	; (8001364 <HAL_I2C_Init+0x274>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d802      	bhi.n	80011c4 <HAL_I2C_Init+0xd4>
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	3301      	adds	r3, #1
 80011c2:	e009      	b.n	80011d8 <HAL_I2C_Init+0xe8>
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011ca:	fb02 f303 	mul.w	r3, r2, r3
 80011ce:	4a69      	ldr	r2, [pc, #420]	; (8001374 <HAL_I2C_Init+0x284>)
 80011d0:	fba2 2303 	umull	r2, r3, r2, r3
 80011d4:	099b      	lsrs	r3, r3, #6
 80011d6:	3301      	adds	r3, #1
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	430b      	orrs	r3, r1
 80011de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	495c      	ldr	r1, [pc, #368]	; (8001364 <HAL_I2C_Init+0x274>)
 80011f4:	428b      	cmp	r3, r1
 80011f6:	d819      	bhi.n	800122c <HAL_I2C_Init+0x13c>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	1e59      	subs	r1, r3, #1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fbb1 f3f3 	udiv	r3, r1, r3
 8001206:	1c59      	adds	r1, r3, #1
 8001208:	f640 73fc 	movw	r3, #4092	; 0xffc
 800120c:	400b      	ands	r3, r1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00a      	beq.n	8001228 <HAL_I2C_Init+0x138>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1e59      	subs	r1, r3, #1
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001220:	3301      	adds	r3, #1
 8001222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001226:	e051      	b.n	80012cc <HAL_I2C_Init+0x1dc>
 8001228:	2304      	movs	r3, #4
 800122a:	e04f      	b.n	80012cc <HAL_I2C_Init+0x1dc>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d111      	bne.n	8001258 <HAL_I2C_Init+0x168>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	1e58      	subs	r0, r3, #1
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6859      	ldr	r1, [r3, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	440b      	add	r3, r1
 8001242:	fbb0 f3f3 	udiv	r3, r0, r3
 8001246:	3301      	adds	r3, #1
 8001248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800124c:	2b00      	cmp	r3, #0
 800124e:	bf0c      	ite	eq
 8001250:	2301      	moveq	r3, #1
 8001252:	2300      	movne	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	e012      	b.n	800127e <HAL_I2C_Init+0x18e>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	1e58      	subs	r0, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6859      	ldr	r1, [r3, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	0099      	lsls	r1, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	fbb0 f3f3 	udiv	r3, r0, r3
 800126e:	3301      	adds	r3, #1
 8001270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf0c      	ite	eq
 8001278:	2301      	moveq	r3, #1
 800127a:	2300      	movne	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_I2C_Init+0x196>
 8001282:	2301      	movs	r3, #1
 8001284:	e022      	b.n	80012cc <HAL_I2C_Init+0x1dc>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10e      	bne.n	80012ac <HAL_I2C_Init+0x1bc>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1e58      	subs	r0, r3, #1
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6859      	ldr	r1, [r3, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	440b      	add	r3, r1
 800129c:	fbb0 f3f3 	udiv	r3, r0, r3
 80012a0:	3301      	adds	r3, #1
 80012a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012aa:	e00f      	b.n	80012cc <HAL_I2C_Init+0x1dc>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	1e58      	subs	r0, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6859      	ldr	r1, [r3, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	0099      	lsls	r1, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	6809      	ldr	r1, [r1, #0]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69da      	ldr	r2, [r3, #28]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	431a      	orrs	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6911      	ldr	r1, [r2, #16]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68d2      	ldr	r2, [r2, #12]
 8001306:	4311      	orrs	r1, r2
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	430b      	orrs	r3, r1
 800130e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	695a      	ldr	r2, [r3, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0201 	orr.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2220      	movs	r2, #32
 8001346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	000186a0 	.word	0x000186a0
 8001368:	001e847f 	.word	0x001e847f
 800136c:	003d08ff 	.word	0x003d08ff
 8001370:	431bde83 	.word	0x431bde83
 8001374:	10624dd3 	.word	0x10624dd3

08001378 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af02      	add	r7, sp, #8
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	461a      	mov	r2, r3
 8001384:	460b      	mov	r3, r1
 8001386:	817b      	strh	r3, [r7, #10]
 8001388:	4613      	mov	r3, r2
 800138a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff fbea 	bl	8000b64 <HAL_GetTick>
 8001390:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b20      	cmp	r3, #32
 800139c:	f040 80e0 	bne.w	8001560 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2319      	movs	r3, #25
 80013a6:	2201      	movs	r2, #1
 80013a8:	4970      	ldr	r1, [pc, #448]	; (800156c <HAL_I2C_Master_Transmit+0x1f4>)
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 f964 	bl	8001678 <I2C_WaitOnFlagUntilTimeout>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80013b6:	2302      	movs	r3, #2
 80013b8:	e0d3      	b.n	8001562 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d101      	bne.n	80013c8 <HAL_I2C_Master_Transmit+0x50>
 80013c4:	2302      	movs	r3, #2
 80013c6:	e0cc      	b.n	8001562 <HAL_I2C_Master_Transmit+0x1ea>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d007      	beq.n	80013ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 0201 	orr.w	r2, r2, #1
 80013ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2221      	movs	r2, #33	; 0x21
 8001402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2210      	movs	r2, #16
 800140a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	893a      	ldrh	r2, [r7, #8]
 800141e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001424:	b29a      	uxth	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4a50      	ldr	r2, [pc, #320]	; (8001570 <HAL_I2C_Master_Transmit+0x1f8>)
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001430:	8979      	ldrh	r1, [r7, #10]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	6a3a      	ldr	r2, [r7, #32]
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 f89c 	bl	8001574 <I2C_MasterRequestWrite>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e08d      	b.n	8001562 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800145c:	e066      	b.n	800152c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	6a39      	ldr	r1, [r7, #32]
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f000 f9de 	bl	8001824 <I2C_WaitOnTXEFlagUntilTimeout>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00d      	beq.n	800148a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	2b04      	cmp	r3, #4
 8001474:	d107      	bne.n	8001486 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001484:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e06b      	b.n	8001562 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	781a      	ldrb	r2, [r3, #0]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	3b01      	subs	r3, #1
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b2:	3b01      	subs	r3, #1
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d11b      	bne.n	8001500 <HAL_I2C_Master_Transmit+0x188>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d017      	beq.n	8001500 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	3b01      	subs	r3, #1
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f8:	3b01      	subs	r3, #1
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	6a39      	ldr	r1, [r7, #32]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 f9ce 	bl	80018a6 <I2C_WaitOnBTFFlagUntilTimeout>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00d      	beq.n	800152c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	2b04      	cmp	r3, #4
 8001516:	d107      	bne.n	8001528 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001526:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e01a      	b.n	8001562 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001530:	2b00      	cmp	r3, #0
 8001532:	d194      	bne.n	800145e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2220      	movs	r2, #32
 8001548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	e000      	b.n	8001562 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001560:	2302      	movs	r3, #2
  }
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	00100002 	.word	0x00100002
 8001570:	ffff0000 	.word	0xffff0000

08001574 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af02      	add	r7, sp, #8
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	460b      	mov	r3, r1
 8001582:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	2b08      	cmp	r3, #8
 800158e:	d006      	beq.n	800159e <I2C_MasterRequestWrite+0x2a>
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d003      	beq.n	800159e <I2C_MasterRequestWrite+0x2a>
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800159c:	d108      	bne.n	80015b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	e00b      	b.n	80015c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	2b12      	cmp	r3, #18
 80015b6:	d107      	bne.n	80015c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f000 f84f 	bl	8001678 <I2C_WaitOnFlagUntilTimeout>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00d      	beq.n	80015fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015ee:	d103      	bne.n	80015f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e035      	b.n	8001668 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001604:	d108      	bne.n	8001618 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001606:	897b      	ldrh	r3, [r7, #10]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	e01b      	b.n	8001650 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001618:	897b      	ldrh	r3, [r7, #10]
 800161a:	11db      	asrs	r3, r3, #7
 800161c:	b2db      	uxtb	r3, r3
 800161e:	f003 0306 	and.w	r3, r3, #6
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f063 030f 	orn	r3, r3, #15
 8001628:	b2da      	uxtb	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	490e      	ldr	r1, [pc, #56]	; (8001670 <I2C_MasterRequestWrite+0xfc>)
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f000 f875 	bl	8001726 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e010      	b.n	8001668 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001646:	897b      	ldrh	r3, [r7, #10]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	4907      	ldr	r1, [pc, #28]	; (8001674 <I2C_MasterRequestWrite+0x100>)
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f865 	bl	8001726 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	00010008 	.word	0x00010008
 8001674:	00010002 	.word	0x00010002

08001678 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	4613      	mov	r3, r2
 8001686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001688:	e025      	b.n	80016d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d021      	beq.n	80016d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001692:	f7ff fa67 	bl	8000b64 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d302      	bcc.n	80016a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d116      	bne.n	80016d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2220      	movs	r2, #32
 80016b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f043 0220 	orr.w	r2, r3, #32
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e023      	b.n	800171e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	0c1b      	lsrs	r3, r3, #16
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d10d      	bne.n	80016fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	43da      	mvns	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4013      	ands	r3, r2
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bf0c      	ite	eq
 80016f2:	2301      	moveq	r3, #1
 80016f4:	2300      	movne	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	e00c      	b.n	8001716 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4013      	ands	r3, r2
 8001708:	b29b      	uxth	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	bf0c      	ite	eq
 800170e:	2301      	moveq	r3, #1
 8001710:	2300      	movne	r3, #0
 8001712:	b2db      	uxtb	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	429a      	cmp	r2, r3
 800171a:	d0b6      	beq.n	800168a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001734:	e051      	b.n	80017da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001744:	d123      	bne.n	800178e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001754:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800175e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2220      	movs	r2, #32
 800176a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f043 0204 	orr.w	r2, r3, #4
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e046      	b.n	800181c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001794:	d021      	beq.n	80017da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001796:	f7ff f9e5 	bl	8000b64 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d302      	bcc.n	80017ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d116      	bne.n	80017da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2220      	movs	r2, #32
 80017b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f043 0220 	orr.w	r2, r3, #32
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e020      	b.n	800181c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	0c1b      	lsrs	r3, r3, #16
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d10c      	bne.n	80017fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	43da      	mvns	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4013      	ands	r3, r2
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	bf14      	ite	ne
 80017f6:	2301      	movne	r3, #1
 80017f8:	2300      	moveq	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	e00b      	b.n	8001816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	43da      	mvns	r2, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	4013      	ands	r3, r2
 800180a:	b29b      	uxth	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf14      	ite	ne
 8001810:	2301      	movne	r3, #1
 8001812:	2300      	moveq	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d18d      	bne.n	8001736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001830:	e02d      	b.n	800188e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 f878 	bl	8001928 <I2C_IsAcknowledgeFailed>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e02d      	b.n	800189e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001848:	d021      	beq.n	800188e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800184a:	f7ff f98b 	bl	8000b64 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	429a      	cmp	r2, r3
 8001858:	d302      	bcc.n	8001860 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d116      	bne.n	800188e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2220      	movs	r2, #32
 800186a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f043 0220 	orr.w	r2, r3, #32
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e007      	b.n	800189e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001898:	2b80      	cmp	r3, #128	; 0x80
 800189a:	d1ca      	bne.n	8001832 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80018b2:	e02d      	b.n	8001910 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 f837 	bl	8001928 <I2C_IsAcknowledgeFailed>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e02d      	b.n	8001920 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ca:	d021      	beq.n	8001910 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018cc:	f7ff f94a 	bl	8000b64 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d302      	bcc.n	80018e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d116      	bne.n	8001910 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2220      	movs	r2, #32
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f043 0220 	orr.w	r2, r3, #32
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e007      	b.n	8001920 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b04      	cmp	r3, #4
 800191c:	d1ca      	bne.n	80018b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800193a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800193e:	d11b      	bne.n	8001978 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001948:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2220      	movs	r2, #32
 8001954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f043 0204 	orr.w	r2, r3, #4
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e26c      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8087 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a4:	4b92      	ldr	r3, [pc, #584]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d00c      	beq.n	80019ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019b0:	4b8f      	ldr	r3, [pc, #572]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d112      	bne.n	80019e2 <HAL_RCC_OscConfig+0x5e>
 80019bc:	4b8c      	ldr	r3, [pc, #560]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c8:	d10b      	bne.n	80019e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ca:	4b89      	ldr	r3, [pc, #548]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d06c      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x12c>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d168      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e246      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ea:	d106      	bne.n	80019fa <HAL_RCC_OscConfig+0x76>
 80019ec:	4b80      	ldr	r3, [pc, #512]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a7f      	ldr	r2, [pc, #508]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	e02e      	b.n	8001a58 <HAL_RCC_OscConfig+0xd4>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x98>
 8001a02:	4b7b      	ldr	r3, [pc, #492]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a7a      	ldr	r2, [pc, #488]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b78      	ldr	r3, [pc, #480]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a77      	ldr	r2, [pc, #476]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e01d      	b.n	8001a58 <HAL_RCC_OscConfig+0xd4>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0xbc>
 8001a26:	4b72      	ldr	r3, [pc, #456]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a71      	ldr	r2, [pc, #452]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	4b6f      	ldr	r3, [pc, #444]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a6e      	ldr	r2, [pc, #440]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e00b      	b.n	8001a58 <HAL_RCC_OscConfig+0xd4>
 8001a40:	4b6b      	ldr	r3, [pc, #428]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a6a      	ldr	r2, [pc, #424]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b68      	ldr	r3, [pc, #416]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a67      	ldr	r2, [pc, #412]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d013      	beq.n	8001a88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff f880 	bl	8000b64 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff f87c 	bl	8000b64 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e1fa      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0xe4>
 8001a86:	e014      	b.n	8001ab2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff f86c 	bl	8000b64 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a90:	f7ff f868 	bl	8000b64 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	; 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e1e6      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa2:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x10c>
 8001aae:	e000      	b.n	8001ab2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d063      	beq.n	8001b86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001abe:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00b      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aca:	4b49      	ldr	r3, [pc, #292]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d11c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x18c>
 8001ad6:	4b46      	ldr	r3, [pc, #280]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d116      	bne.n	8001b10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae2:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d005      	beq.n	8001afa <HAL_RCC_OscConfig+0x176>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d001      	beq.n	8001afa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e1ba      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afa:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4939      	ldr	r1, [pc, #228]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0e:	e03a      	b.n	8001b86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d020      	beq.n	8001b5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b18:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7ff f821 	bl	8000b64 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b26:	f7ff f81d 	bl	8000b64 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e19b      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b38:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4927      	ldr	r1, [pc, #156]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
 8001b58:	e015      	b.n	8001b86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff f800 	bl	8000b64 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b68:	f7fe fffc 	bl	8000b64 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e17a      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d03a      	beq.n	8001c08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d019      	beq.n	8001bce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9a:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba0:	f7fe ffe0 	bl	8000b64 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba8:	f7fe ffdc 	bl	8000b64 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e15a      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f000 fac4 	bl	8002154 <RCC_Delay>
 8001bcc:	e01c      	b.n	8001c08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_RCC_OscConfig+0x274>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd4:	f7fe ffc6 	bl	8000b64 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bda:	e00f      	b.n	8001bfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bdc:	f7fe ffc2 	bl	8000b64 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d908      	bls.n	8001bfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e140      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	42420000 	.word	0x42420000
 8001bf8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfc:	4b9e      	ldr	r3, [pc, #632]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1e9      	bne.n	8001bdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80a6 	beq.w	8001d62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1a:	4b97      	ldr	r3, [pc, #604]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10d      	bne.n	8001c42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b94      	ldr	r3, [pc, #592]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a93      	ldr	r2, [pc, #588]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	61d3      	str	r3, [r2, #28]
 8001c32:	4b91      	ldr	r3, [pc, #580]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c42:	4b8e      	ldr	r3, [pc, #568]	; (8001e7c <HAL_RCC_OscConfig+0x4f8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d118      	bne.n	8001c80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4e:	4b8b      	ldr	r3, [pc, #556]	; (8001e7c <HAL_RCC_OscConfig+0x4f8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a8a      	ldr	r2, [pc, #552]	; (8001e7c <HAL_RCC_OscConfig+0x4f8>)
 8001c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5a:	f7fe ff83 	bl	8000b64 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c62:	f7fe ff7f 	bl	8000b64 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b64      	cmp	r3, #100	; 0x64
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e0fd      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	4b81      	ldr	r3, [pc, #516]	; (8001e7c <HAL_RCC_OscConfig+0x4f8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x312>
 8001c88:	4b7b      	ldr	r3, [pc, #492]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4a7a      	ldr	r2, [pc, #488]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6213      	str	r3, [r2, #32]
 8001c94:	e02d      	b.n	8001cf2 <HAL_RCC_OscConfig+0x36e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x334>
 8001c9e:	4b76      	ldr	r3, [pc, #472]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4a75      	ldr	r2, [pc, #468]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	6213      	str	r3, [r2, #32]
 8001caa:	4b73      	ldr	r3, [pc, #460]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	4a72      	ldr	r2, [pc, #456]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	f023 0304 	bic.w	r3, r3, #4
 8001cb4:	6213      	str	r3, [r2, #32]
 8001cb6:	e01c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x36e>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d10c      	bne.n	8001cda <HAL_RCC_OscConfig+0x356>
 8001cc0:	4b6d      	ldr	r3, [pc, #436]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4a6c      	ldr	r2, [pc, #432]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	6213      	str	r3, [r2, #32]
 8001ccc:	4b6a      	ldr	r3, [pc, #424]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	4a69      	ldr	r2, [pc, #420]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6213      	str	r3, [r2, #32]
 8001cd8:	e00b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x36e>
 8001cda:	4b67      	ldr	r3, [pc, #412]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4a66      	ldr	r2, [pc, #408]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6213      	str	r3, [r2, #32]
 8001ce6:	4b64      	ldr	r3, [pc, #400]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	4a63      	ldr	r2, [pc, #396]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	f023 0304 	bic.w	r3, r3, #4
 8001cf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d015      	beq.n	8001d26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfa:	f7fe ff33 	bl	8000b64 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7fe ff2f 	bl	8000b64 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e0ab      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	4b57      	ldr	r3, [pc, #348]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0ee      	beq.n	8001d02 <HAL_RCC_OscConfig+0x37e>
 8001d24:	e014      	b.n	8001d50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7fe ff1d 	bl	8000b64 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7fe ff19 	bl	8000b64 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e095      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d44:	4b4c      	ldr	r3, [pc, #304]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ee      	bne.n	8001d2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d105      	bne.n	8001d62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d56:	4b48      	ldr	r3, [pc, #288]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	4a47      	ldr	r2, [pc, #284]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 8081 	beq.w	8001e6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d6c:	4b42      	ldr	r3, [pc, #264]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d061      	beq.n	8001e3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d146      	bne.n	8001e0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d80:	4b3f      	ldr	r3, [pc, #252]	; (8001e80 <HAL_RCC_OscConfig+0x4fc>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7fe feed 	bl	8000b64 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7fe fee9 	bl	8000b64 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e067      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da0:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db4:	d108      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001db6:	4b30      	ldr	r3, [pc, #192]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	492d      	ldr	r1, [pc, #180]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc8:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a19      	ldr	r1, [r3, #32]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	4927      	ldr	r1, [pc, #156]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de0:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <HAL_RCC_OscConfig+0x4fc>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7fe febd 	bl	8000b64 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dee:	f7fe feb9 	bl	8000b64 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e037      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x46a>
 8001e0c:	e02f      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0e:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <HAL_RCC_OscConfig+0x4fc>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7fe fea6 	bl	8000b64 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7fe fea2 	bl	8000b64 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e020      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x498>
 8001e3a:	e018      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e013      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d001      	beq.n	8001e6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	42420060 	.word	0x42420060

08001e84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0d0      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d910      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b67      	ldr	r3, [pc, #412]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 0207 	bic.w	r2, r3, #7
 8001eae:	4965      	ldr	r1, [pc, #404]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b63      	ldr	r3, [pc, #396]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0b8      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d020      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee0:	4b59      	ldr	r3, [pc, #356]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4a58      	ldr	r2, [pc, #352]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef8:	4b53      	ldr	r3, [pc, #332]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a52      	ldr	r2, [pc, #328]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b50      	ldr	r3, [pc, #320]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	494d      	ldr	r1, [pc, #308]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d040      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	4b47      	ldr	r3, [pc, #284]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d115      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e07f      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	4b41      	ldr	r3, [pc, #260]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e073      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e06b      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b39      	ldr	r3, [pc, #228]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4936      	ldr	r1, [pc, #216]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f74:	f7fe fdf6 	bl	8000b64 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7fe fdf2 	bl	8000b64 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e053      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d210      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 0207 	bic.w	r2, r3, #7
 8001fba:	4922      	ldr	r1, [pc, #136]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e032      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4916      	ldr	r1, [pc, #88]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	490e      	ldr	r1, [pc, #56]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002012:	f000 f821 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8002016:	4602      	mov	r2, r0
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	490a      	ldr	r1, [pc, #40]	; (800204c <HAL_RCC_ClockConfig+0x1c8>)
 8002024:	5ccb      	ldrb	r3, [r1, r3]
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	4a09      	ldr	r2, [pc, #36]	; (8002050 <HAL_RCC_ClockConfig+0x1cc>)
 800202c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x1d0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fd54 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40022000 	.word	0x40022000
 8002048:	40021000 	.word	0x40021000
 800204c:	08003014 	.word	0x08003014
 8002050:	20000000 	.word	0x20000000
 8002054:	20000004 	.word	0x20000004

08002058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002058:	b490      	push	{r4, r7}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800205e:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002060:	1d3c      	adds	r4, r7, #4
 8002062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002064:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002068:	f240 2301 	movw	r3, #513	; 0x201
 800206c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002082:	4b22      	ldr	r3, [pc, #136]	; (800210c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b04      	cmp	r3, #4
 8002090:	d002      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x40>
 8002092:	2b08      	cmp	r3, #8
 8002094:	d003      	beq.n	800209e <HAL_RCC_GetSysClockFreq+0x46>
 8002096:	e02d      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_RCC_GetSysClockFreq+0xb8>)
 800209a:	623b      	str	r3, [r7, #32]
      break;
 800209c:	e02d      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	0c9b      	lsrs	r3, r3, #18
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020aa:	4413      	add	r3, r2
 80020ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d013      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	0c5b      	lsrs	r3, r3, #17
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ca:	4413      	add	r3, r2
 80020cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	4a0e      	ldr	r2, [pc, #56]	; (8002110 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d6:	fb02 f203 	mul.w	r2, r2, r3
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
 80020e2:	e004      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	4a0b      	ldr	r2, [pc, #44]	; (8002114 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020e8:	fb02 f303 	mul.w	r3, r2, r3
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	623b      	str	r3, [r7, #32]
      break;
 80020f2:	e002      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f6:	623b      	str	r3, [r7, #32]
      break;
 80020f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020fa:	6a3b      	ldr	r3, [r7, #32]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3728      	adds	r7, #40	; 0x28
 8002100:	46bd      	mov	sp, r7
 8002102:	bc90      	pop	{r4, r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	08003004 	.word	0x08003004
 800210c:	40021000 	.word	0x40021000
 8002110:	007a1200 	.word	0x007a1200
 8002114:	003d0900 	.word	0x003d0900

08002118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800211c:	4b02      	ldr	r3, [pc, #8]	; (8002128 <HAL_RCC_GetHCLKFreq+0x10>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr
 8002128:	20000000 	.word	0x20000000

0800212c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002130:	f7ff fff2 	bl	8002118 <HAL_RCC_GetHCLKFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	0a1b      	lsrs	r3, r3, #8
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	4903      	ldr	r1, [pc, #12]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002142:	5ccb      	ldrb	r3, [r1, r3]
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	08003024 	.word	0x08003024

08002154 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <RCC_Delay+0x34>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0a      	ldr	r2, [pc, #40]	; (800218c <RCC_Delay+0x38>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	0a5b      	lsrs	r3, r3, #9
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002170:	bf00      	nop
  }
  while (Delay --);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1e5a      	subs	r2, r3, #1
 8002176:	60fa      	str	r2, [r7, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f9      	bne.n	8002170 <RCC_Delay+0x1c>
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	20000000 	.word	0x20000000
 800218c:	10624dd3 	.word	0x10624dd3

08002190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e041      	b.n	8002226 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7fe fbd4 	bl	8000964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3304      	adds	r3, #4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4610      	mov	r0, r2
 80021d0:	f000 f93c 	bl	800244c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d001      	beq.n	8002248 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e032      	b.n	80022ae <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a18      	ldr	r2, [pc, #96]	; (80022b8 <HAL_TIM_Base_Start+0x88>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00e      	beq.n	8002278 <HAL_TIM_Base_Start+0x48>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002262:	d009      	beq.n	8002278 <HAL_TIM_Base_Start+0x48>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a14      	ldr	r2, [pc, #80]	; (80022bc <HAL_TIM_Base_Start+0x8c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d004      	beq.n	8002278 <HAL_TIM_Base_Start+0x48>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a13      	ldr	r2, [pc, #76]	; (80022c0 <HAL_TIM_Base_Start+0x90>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d111      	bne.n	800229c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b06      	cmp	r3, #6
 8002288:	d010      	beq.n	80022ac <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800229a:	e007      	b.n	80022ac <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	40012c00 	.word	0x40012c00
 80022bc:	40000400 	.word	0x40000400
 80022c0:	40000800 	.word	0x40000800

080022c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_TIM_ConfigClockSource+0x18>
 80022d8:	2302      	movs	r3, #2
 80022da:	e0b3      	b.n	8002444 <HAL_TIM_ConfigClockSource+0x180>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002302:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002314:	d03e      	beq.n	8002394 <HAL_TIM_ConfigClockSource+0xd0>
 8002316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800231a:	f200 8087 	bhi.w	800242c <HAL_TIM_ConfigClockSource+0x168>
 800231e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002322:	f000 8085 	beq.w	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800232a:	d87f      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 800232c:	2b70      	cmp	r3, #112	; 0x70
 800232e:	d01a      	beq.n	8002366 <HAL_TIM_ConfigClockSource+0xa2>
 8002330:	2b70      	cmp	r3, #112	; 0x70
 8002332:	d87b      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 8002334:	2b60      	cmp	r3, #96	; 0x60
 8002336:	d050      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x116>
 8002338:	2b60      	cmp	r3, #96	; 0x60
 800233a:	d877      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 800233c:	2b50      	cmp	r3, #80	; 0x50
 800233e:	d03c      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0xf6>
 8002340:	2b50      	cmp	r3, #80	; 0x50
 8002342:	d873      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 8002344:	2b40      	cmp	r3, #64	; 0x40
 8002346:	d058      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0x136>
 8002348:	2b40      	cmp	r3, #64	; 0x40
 800234a:	d86f      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 800234c:	2b30      	cmp	r3, #48	; 0x30
 800234e:	d064      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x156>
 8002350:	2b30      	cmp	r3, #48	; 0x30
 8002352:	d86b      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 8002354:	2b20      	cmp	r3, #32
 8002356:	d060      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x156>
 8002358:	2b20      	cmp	r3, #32
 800235a:	d867      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 800235c:	2b00      	cmp	r3, #0
 800235e:	d05c      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x156>
 8002360:	2b10      	cmp	r3, #16
 8002362:	d05a      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002364:	e062      	b.n	800242c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6899      	ldr	r1, [r3, #8]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f000 f942 	bl	80025fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002388:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	609a      	str	r2, [r3, #8]
      break;
 8002392:	e04e      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6899      	ldr	r1, [r3, #8]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f000 f92b 	bl	80025fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023b6:	609a      	str	r2, [r3, #8]
      break;
 80023b8:	e03b      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6859      	ldr	r1, [r3, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	461a      	mov	r2, r3
 80023c8:	f000 f8a2 	bl	8002510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2150      	movs	r1, #80	; 0x50
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f8f9 	bl	80025ca <TIM_ITRx_SetConfig>
      break;
 80023d8:	e02b      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	461a      	mov	r2, r3
 80023e8:	f000 f8c0 	bl	800256c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2160      	movs	r1, #96	; 0x60
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 f8e9 	bl	80025ca <TIM_ITRx_SetConfig>
      break;
 80023f8:	e01b      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6859      	ldr	r1, [r3, #4]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	461a      	mov	r2, r3
 8002408:	f000 f882 	bl	8002510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2140      	movs	r1, #64	; 0x40
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f8d9 	bl	80025ca <TIM_ITRx_SetConfig>
      break;
 8002418:	e00b      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4619      	mov	r1, r3
 8002424:	4610      	mov	r0, r2
 8002426:	f000 f8d0 	bl	80025ca <TIM_ITRx_SetConfig>
        break;
 800242a:	e002      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800242c:	bf00      	nop
 800242e:	e000      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002430:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a29      	ldr	r2, [pc, #164]	; (8002504 <TIM_Base_SetConfig+0xb8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d00b      	beq.n	800247c <TIM_Base_SetConfig+0x30>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800246a:	d007      	beq.n	800247c <TIM_Base_SetConfig+0x30>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a26      	ldr	r2, [pc, #152]	; (8002508 <TIM_Base_SetConfig+0xbc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d003      	beq.n	800247c <TIM_Base_SetConfig+0x30>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a25      	ldr	r2, [pc, #148]	; (800250c <TIM_Base_SetConfig+0xc0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d108      	bne.n	800248e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <TIM_Base_SetConfig+0xb8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00b      	beq.n	80024ae <TIM_Base_SetConfig+0x62>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249c:	d007      	beq.n	80024ae <TIM_Base_SetConfig+0x62>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a19      	ldr	r2, [pc, #100]	; (8002508 <TIM_Base_SetConfig+0xbc>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d003      	beq.n	80024ae <TIM_Base_SetConfig+0x62>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a18      	ldr	r2, [pc, #96]	; (800250c <TIM_Base_SetConfig+0xc0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d108      	bne.n	80024c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a07      	ldr	r2, [pc, #28]	; (8002504 <TIM_Base_SetConfig+0xb8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d103      	bne.n	80024f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	615a      	str	r2, [r3, #20]
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	40012c00 	.word	0x40012c00
 8002508:	40000400 	.word	0x40000400
 800250c:	40000800 	.word	0x40000800

08002510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	f023 0201 	bic.w	r2, r3, #1
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800253a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f023 030a 	bic.w	r3, r3, #10
 800254c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	621a      	str	r2, [r3, #32]
}
 8002562:	bf00      	nop
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f023 0210 	bic.w	r2, r3, #16
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002596:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	031b      	lsls	r3, r3, #12
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	4313      	orrs	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	621a      	str	r2, [r3, #32]
}
 80025c0:	bf00      	nop
 80025c2:	371c      	adds	r7, #28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr

080025ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b085      	sub	sp, #20
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f043 0307 	orr.w	r3, r3, #7
 80025ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	609a      	str	r2, [r3, #8]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr

080025fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025fe:	b480      	push	{r7}
 8002600:	b087      	sub	sp, #28
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002618:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	021a      	lsls	r2, r3, #8
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	431a      	orrs	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4313      	orrs	r3, r2
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	609a      	str	r2, [r3, #8]
}
 8002632:	bf00      	nop
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002650:	2302      	movs	r3, #2
 8002652:	e046      	b.n	80026e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a16      	ldr	r2, [pc, #88]	; (80026ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00e      	beq.n	80026b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a0:	d009      	beq.n	80026b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d004      	beq.n	80026b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a10      	ldr	r2, [pc, #64]	; (80026f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10c      	bne.n	80026d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr
 80026ec:	40012c00 	.word	0x40012c00
 80026f0:	40000400 	.word	0x40000400
 80026f4:	40000800 	.word	0x40000800

080026f8 <__errno>:
 80026f8:	4b01      	ldr	r3, [pc, #4]	; (8002700 <__errno+0x8>)
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	2000000c 	.word	0x2000000c

08002704 <__libc_init_array>:
 8002704:	b570      	push	{r4, r5, r6, lr}
 8002706:	2600      	movs	r6, #0
 8002708:	4d0c      	ldr	r5, [pc, #48]	; (800273c <__libc_init_array+0x38>)
 800270a:	4c0d      	ldr	r4, [pc, #52]	; (8002740 <__libc_init_array+0x3c>)
 800270c:	1b64      	subs	r4, r4, r5
 800270e:	10a4      	asrs	r4, r4, #2
 8002710:	42a6      	cmp	r6, r4
 8002712:	d109      	bne.n	8002728 <__libc_init_array+0x24>
 8002714:	f000 fc5c 	bl	8002fd0 <_init>
 8002718:	2600      	movs	r6, #0
 800271a:	4d0a      	ldr	r5, [pc, #40]	; (8002744 <__libc_init_array+0x40>)
 800271c:	4c0a      	ldr	r4, [pc, #40]	; (8002748 <__libc_init_array+0x44>)
 800271e:	1b64      	subs	r4, r4, r5
 8002720:	10a4      	asrs	r4, r4, #2
 8002722:	42a6      	cmp	r6, r4
 8002724:	d105      	bne.n	8002732 <__libc_init_array+0x2e>
 8002726:	bd70      	pop	{r4, r5, r6, pc}
 8002728:	f855 3b04 	ldr.w	r3, [r5], #4
 800272c:	4798      	blx	r3
 800272e:	3601      	adds	r6, #1
 8002730:	e7ee      	b.n	8002710 <__libc_init_array+0xc>
 8002732:	f855 3b04 	ldr.w	r3, [r5], #4
 8002736:	4798      	blx	r3
 8002738:	3601      	adds	r6, #1
 800273a:	e7f2      	b.n	8002722 <__libc_init_array+0x1e>
 800273c:	08003060 	.word	0x08003060
 8002740:	08003060 	.word	0x08003060
 8002744:	08003060 	.word	0x08003060
 8002748:	08003064 	.word	0x08003064

0800274c <memset>:
 800274c:	4603      	mov	r3, r0
 800274e:	4402      	add	r2, r0
 8002750:	4293      	cmp	r3, r2
 8002752:	d100      	bne.n	8002756 <memset+0xa>
 8002754:	4770      	bx	lr
 8002756:	f803 1b01 	strb.w	r1, [r3], #1
 800275a:	e7f9      	b.n	8002750 <memset+0x4>

0800275c <siprintf>:
 800275c:	b40e      	push	{r1, r2, r3}
 800275e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002762:	b500      	push	{lr}
 8002764:	b09c      	sub	sp, #112	; 0x70
 8002766:	ab1d      	add	r3, sp, #116	; 0x74
 8002768:	9002      	str	r0, [sp, #8]
 800276a:	9006      	str	r0, [sp, #24]
 800276c:	9107      	str	r1, [sp, #28]
 800276e:	9104      	str	r1, [sp, #16]
 8002770:	4808      	ldr	r0, [pc, #32]	; (8002794 <siprintf+0x38>)
 8002772:	4909      	ldr	r1, [pc, #36]	; (8002798 <siprintf+0x3c>)
 8002774:	f853 2b04 	ldr.w	r2, [r3], #4
 8002778:	9105      	str	r1, [sp, #20]
 800277a:	6800      	ldr	r0, [r0, #0]
 800277c:	a902      	add	r1, sp, #8
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	f000 f868 	bl	8002854 <_svfiprintf_r>
 8002784:	2200      	movs	r2, #0
 8002786:	9b02      	ldr	r3, [sp, #8]
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	b01c      	add	sp, #112	; 0x70
 800278c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002790:	b003      	add	sp, #12
 8002792:	4770      	bx	lr
 8002794:	2000000c 	.word	0x2000000c
 8002798:	ffff0208 	.word	0xffff0208

0800279c <__ssputs_r>:
 800279c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027a0:	688e      	ldr	r6, [r1, #8]
 80027a2:	4682      	mov	sl, r0
 80027a4:	429e      	cmp	r6, r3
 80027a6:	460c      	mov	r4, r1
 80027a8:	4690      	mov	r8, r2
 80027aa:	461f      	mov	r7, r3
 80027ac:	d838      	bhi.n	8002820 <__ssputs_r+0x84>
 80027ae:	898a      	ldrh	r2, [r1, #12]
 80027b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80027b4:	d032      	beq.n	800281c <__ssputs_r+0x80>
 80027b6:	6825      	ldr	r5, [r4, #0]
 80027b8:	6909      	ldr	r1, [r1, #16]
 80027ba:	3301      	adds	r3, #1
 80027bc:	eba5 0901 	sub.w	r9, r5, r1
 80027c0:	6965      	ldr	r5, [r4, #20]
 80027c2:	444b      	add	r3, r9
 80027c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80027cc:	106d      	asrs	r5, r5, #1
 80027ce:	429d      	cmp	r5, r3
 80027d0:	bf38      	it	cc
 80027d2:	461d      	movcc	r5, r3
 80027d4:	0553      	lsls	r3, r2, #21
 80027d6:	d531      	bpl.n	800283c <__ssputs_r+0xa0>
 80027d8:	4629      	mov	r1, r5
 80027da:	f000 fb53 	bl	8002e84 <_malloc_r>
 80027de:	4606      	mov	r6, r0
 80027e0:	b950      	cbnz	r0, 80027f8 <__ssputs_r+0x5c>
 80027e2:	230c      	movs	r3, #12
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	f8ca 3000 	str.w	r3, [sl]
 80027ec:	89a3      	ldrh	r3, [r4, #12]
 80027ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f2:	81a3      	strh	r3, [r4, #12]
 80027f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027f8:	464a      	mov	r2, r9
 80027fa:	6921      	ldr	r1, [r4, #16]
 80027fc:	f000 face 	bl	8002d9c <memcpy>
 8002800:	89a3      	ldrh	r3, [r4, #12]
 8002802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800280a:	81a3      	strh	r3, [r4, #12]
 800280c:	6126      	str	r6, [r4, #16]
 800280e:	444e      	add	r6, r9
 8002810:	6026      	str	r6, [r4, #0]
 8002812:	463e      	mov	r6, r7
 8002814:	6165      	str	r5, [r4, #20]
 8002816:	eba5 0509 	sub.w	r5, r5, r9
 800281a:	60a5      	str	r5, [r4, #8]
 800281c:	42be      	cmp	r6, r7
 800281e:	d900      	bls.n	8002822 <__ssputs_r+0x86>
 8002820:	463e      	mov	r6, r7
 8002822:	4632      	mov	r2, r6
 8002824:	4641      	mov	r1, r8
 8002826:	6820      	ldr	r0, [r4, #0]
 8002828:	f000 fac6 	bl	8002db8 <memmove>
 800282c:	68a3      	ldr	r3, [r4, #8]
 800282e:	6822      	ldr	r2, [r4, #0]
 8002830:	1b9b      	subs	r3, r3, r6
 8002832:	4432      	add	r2, r6
 8002834:	2000      	movs	r0, #0
 8002836:	60a3      	str	r3, [r4, #8]
 8002838:	6022      	str	r2, [r4, #0]
 800283a:	e7db      	b.n	80027f4 <__ssputs_r+0x58>
 800283c:	462a      	mov	r2, r5
 800283e:	f000 fb7b 	bl	8002f38 <_realloc_r>
 8002842:	4606      	mov	r6, r0
 8002844:	2800      	cmp	r0, #0
 8002846:	d1e1      	bne.n	800280c <__ssputs_r+0x70>
 8002848:	4650      	mov	r0, sl
 800284a:	6921      	ldr	r1, [r4, #16]
 800284c:	f000 face 	bl	8002dec <_free_r>
 8002850:	e7c7      	b.n	80027e2 <__ssputs_r+0x46>
	...

08002854 <_svfiprintf_r>:
 8002854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002858:	4698      	mov	r8, r3
 800285a:	898b      	ldrh	r3, [r1, #12]
 800285c:	4607      	mov	r7, r0
 800285e:	061b      	lsls	r3, r3, #24
 8002860:	460d      	mov	r5, r1
 8002862:	4614      	mov	r4, r2
 8002864:	b09d      	sub	sp, #116	; 0x74
 8002866:	d50e      	bpl.n	8002886 <_svfiprintf_r+0x32>
 8002868:	690b      	ldr	r3, [r1, #16]
 800286a:	b963      	cbnz	r3, 8002886 <_svfiprintf_r+0x32>
 800286c:	2140      	movs	r1, #64	; 0x40
 800286e:	f000 fb09 	bl	8002e84 <_malloc_r>
 8002872:	6028      	str	r0, [r5, #0]
 8002874:	6128      	str	r0, [r5, #16]
 8002876:	b920      	cbnz	r0, 8002882 <_svfiprintf_r+0x2e>
 8002878:	230c      	movs	r3, #12
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	f04f 30ff 	mov.w	r0, #4294967295
 8002880:	e0d1      	b.n	8002a26 <_svfiprintf_r+0x1d2>
 8002882:	2340      	movs	r3, #64	; 0x40
 8002884:	616b      	str	r3, [r5, #20]
 8002886:	2300      	movs	r3, #0
 8002888:	9309      	str	r3, [sp, #36]	; 0x24
 800288a:	2320      	movs	r3, #32
 800288c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002890:	2330      	movs	r3, #48	; 0x30
 8002892:	f04f 0901 	mov.w	r9, #1
 8002896:	f8cd 800c 	str.w	r8, [sp, #12]
 800289a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002a40 <_svfiprintf_r+0x1ec>
 800289e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028a2:	4623      	mov	r3, r4
 80028a4:	469a      	mov	sl, r3
 80028a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028aa:	b10a      	cbz	r2, 80028b0 <_svfiprintf_r+0x5c>
 80028ac:	2a25      	cmp	r2, #37	; 0x25
 80028ae:	d1f9      	bne.n	80028a4 <_svfiprintf_r+0x50>
 80028b0:	ebba 0b04 	subs.w	fp, sl, r4
 80028b4:	d00b      	beq.n	80028ce <_svfiprintf_r+0x7a>
 80028b6:	465b      	mov	r3, fp
 80028b8:	4622      	mov	r2, r4
 80028ba:	4629      	mov	r1, r5
 80028bc:	4638      	mov	r0, r7
 80028be:	f7ff ff6d 	bl	800279c <__ssputs_r>
 80028c2:	3001      	adds	r0, #1
 80028c4:	f000 80aa 	beq.w	8002a1c <_svfiprintf_r+0x1c8>
 80028c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028ca:	445a      	add	r2, fp
 80028cc:	9209      	str	r2, [sp, #36]	; 0x24
 80028ce:	f89a 3000 	ldrb.w	r3, [sl]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80a2 	beq.w	8002a1c <_svfiprintf_r+0x1c8>
 80028d8:	2300      	movs	r3, #0
 80028da:	f04f 32ff 	mov.w	r2, #4294967295
 80028de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028e2:	f10a 0a01 	add.w	sl, sl, #1
 80028e6:	9304      	str	r3, [sp, #16]
 80028e8:	9307      	str	r3, [sp, #28]
 80028ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028ee:	931a      	str	r3, [sp, #104]	; 0x68
 80028f0:	4654      	mov	r4, sl
 80028f2:	2205      	movs	r2, #5
 80028f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028f8:	4851      	ldr	r0, [pc, #324]	; (8002a40 <_svfiprintf_r+0x1ec>)
 80028fa:	f000 fa41 	bl	8002d80 <memchr>
 80028fe:	9a04      	ldr	r2, [sp, #16]
 8002900:	b9d8      	cbnz	r0, 800293a <_svfiprintf_r+0xe6>
 8002902:	06d0      	lsls	r0, r2, #27
 8002904:	bf44      	itt	mi
 8002906:	2320      	movmi	r3, #32
 8002908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800290c:	0711      	lsls	r1, r2, #28
 800290e:	bf44      	itt	mi
 8002910:	232b      	movmi	r3, #43	; 0x2b
 8002912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002916:	f89a 3000 	ldrb.w	r3, [sl]
 800291a:	2b2a      	cmp	r3, #42	; 0x2a
 800291c:	d015      	beq.n	800294a <_svfiprintf_r+0xf6>
 800291e:	4654      	mov	r4, sl
 8002920:	2000      	movs	r0, #0
 8002922:	f04f 0c0a 	mov.w	ip, #10
 8002926:	9a07      	ldr	r2, [sp, #28]
 8002928:	4621      	mov	r1, r4
 800292a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800292e:	3b30      	subs	r3, #48	; 0x30
 8002930:	2b09      	cmp	r3, #9
 8002932:	d94e      	bls.n	80029d2 <_svfiprintf_r+0x17e>
 8002934:	b1b0      	cbz	r0, 8002964 <_svfiprintf_r+0x110>
 8002936:	9207      	str	r2, [sp, #28]
 8002938:	e014      	b.n	8002964 <_svfiprintf_r+0x110>
 800293a:	eba0 0308 	sub.w	r3, r0, r8
 800293e:	fa09 f303 	lsl.w	r3, r9, r3
 8002942:	4313      	orrs	r3, r2
 8002944:	46a2      	mov	sl, r4
 8002946:	9304      	str	r3, [sp, #16]
 8002948:	e7d2      	b.n	80028f0 <_svfiprintf_r+0x9c>
 800294a:	9b03      	ldr	r3, [sp, #12]
 800294c:	1d19      	adds	r1, r3, #4
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	9103      	str	r1, [sp, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	bfbb      	ittet	lt
 8002956:	425b      	neglt	r3, r3
 8002958:	f042 0202 	orrlt.w	r2, r2, #2
 800295c:	9307      	strge	r3, [sp, #28]
 800295e:	9307      	strlt	r3, [sp, #28]
 8002960:	bfb8      	it	lt
 8002962:	9204      	strlt	r2, [sp, #16]
 8002964:	7823      	ldrb	r3, [r4, #0]
 8002966:	2b2e      	cmp	r3, #46	; 0x2e
 8002968:	d10c      	bne.n	8002984 <_svfiprintf_r+0x130>
 800296a:	7863      	ldrb	r3, [r4, #1]
 800296c:	2b2a      	cmp	r3, #42	; 0x2a
 800296e:	d135      	bne.n	80029dc <_svfiprintf_r+0x188>
 8002970:	9b03      	ldr	r3, [sp, #12]
 8002972:	3402      	adds	r4, #2
 8002974:	1d1a      	adds	r2, r3, #4
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	9203      	str	r2, [sp, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	bfb8      	it	lt
 800297e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002982:	9305      	str	r3, [sp, #20]
 8002984:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002a50 <_svfiprintf_r+0x1fc>
 8002988:	2203      	movs	r2, #3
 800298a:	4650      	mov	r0, sl
 800298c:	7821      	ldrb	r1, [r4, #0]
 800298e:	f000 f9f7 	bl	8002d80 <memchr>
 8002992:	b140      	cbz	r0, 80029a6 <_svfiprintf_r+0x152>
 8002994:	2340      	movs	r3, #64	; 0x40
 8002996:	eba0 000a 	sub.w	r0, r0, sl
 800299a:	fa03 f000 	lsl.w	r0, r3, r0
 800299e:	9b04      	ldr	r3, [sp, #16]
 80029a0:	3401      	adds	r4, #1
 80029a2:	4303      	orrs	r3, r0
 80029a4:	9304      	str	r3, [sp, #16]
 80029a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029aa:	2206      	movs	r2, #6
 80029ac:	4825      	ldr	r0, [pc, #148]	; (8002a44 <_svfiprintf_r+0x1f0>)
 80029ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029b2:	f000 f9e5 	bl	8002d80 <memchr>
 80029b6:	2800      	cmp	r0, #0
 80029b8:	d038      	beq.n	8002a2c <_svfiprintf_r+0x1d8>
 80029ba:	4b23      	ldr	r3, [pc, #140]	; (8002a48 <_svfiprintf_r+0x1f4>)
 80029bc:	bb1b      	cbnz	r3, 8002a06 <_svfiprintf_r+0x1b2>
 80029be:	9b03      	ldr	r3, [sp, #12]
 80029c0:	3307      	adds	r3, #7
 80029c2:	f023 0307 	bic.w	r3, r3, #7
 80029c6:	3308      	adds	r3, #8
 80029c8:	9303      	str	r3, [sp, #12]
 80029ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029cc:	4433      	add	r3, r6
 80029ce:	9309      	str	r3, [sp, #36]	; 0x24
 80029d0:	e767      	b.n	80028a2 <_svfiprintf_r+0x4e>
 80029d2:	460c      	mov	r4, r1
 80029d4:	2001      	movs	r0, #1
 80029d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80029da:	e7a5      	b.n	8002928 <_svfiprintf_r+0xd4>
 80029dc:	2300      	movs	r3, #0
 80029de:	f04f 0c0a 	mov.w	ip, #10
 80029e2:	4619      	mov	r1, r3
 80029e4:	3401      	adds	r4, #1
 80029e6:	9305      	str	r3, [sp, #20]
 80029e8:	4620      	mov	r0, r4
 80029ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029ee:	3a30      	subs	r2, #48	; 0x30
 80029f0:	2a09      	cmp	r2, #9
 80029f2:	d903      	bls.n	80029fc <_svfiprintf_r+0x1a8>
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0c5      	beq.n	8002984 <_svfiprintf_r+0x130>
 80029f8:	9105      	str	r1, [sp, #20]
 80029fa:	e7c3      	b.n	8002984 <_svfiprintf_r+0x130>
 80029fc:	4604      	mov	r4, r0
 80029fe:	2301      	movs	r3, #1
 8002a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a04:	e7f0      	b.n	80029e8 <_svfiprintf_r+0x194>
 8002a06:	ab03      	add	r3, sp, #12
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	462a      	mov	r2, r5
 8002a0c:	4638      	mov	r0, r7
 8002a0e:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <_svfiprintf_r+0x1f8>)
 8002a10:	a904      	add	r1, sp, #16
 8002a12:	f3af 8000 	nop.w
 8002a16:	1c42      	adds	r2, r0, #1
 8002a18:	4606      	mov	r6, r0
 8002a1a:	d1d6      	bne.n	80029ca <_svfiprintf_r+0x176>
 8002a1c:	89ab      	ldrh	r3, [r5, #12]
 8002a1e:	065b      	lsls	r3, r3, #25
 8002a20:	f53f af2c 	bmi.w	800287c <_svfiprintf_r+0x28>
 8002a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a26:	b01d      	add	sp, #116	; 0x74
 8002a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a2c:	ab03      	add	r3, sp, #12
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	462a      	mov	r2, r5
 8002a32:	4638      	mov	r0, r7
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <_svfiprintf_r+0x1f8>)
 8002a36:	a904      	add	r1, sp, #16
 8002a38:	f000 f87c 	bl	8002b34 <_printf_i>
 8002a3c:	e7eb      	b.n	8002a16 <_svfiprintf_r+0x1c2>
 8002a3e:	bf00      	nop
 8002a40:	0800302c 	.word	0x0800302c
 8002a44:	08003036 	.word	0x08003036
 8002a48:	00000000 	.word	0x00000000
 8002a4c:	0800279d 	.word	0x0800279d
 8002a50:	08003032 	.word	0x08003032

08002a54 <_printf_common>:
 8002a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a58:	4616      	mov	r6, r2
 8002a5a:	4699      	mov	r9, r3
 8002a5c:	688a      	ldr	r2, [r1, #8]
 8002a5e:	690b      	ldr	r3, [r1, #16]
 8002a60:	4607      	mov	r7, r0
 8002a62:	4293      	cmp	r3, r2
 8002a64:	bfb8      	it	lt
 8002a66:	4613      	movlt	r3, r2
 8002a68:	6033      	str	r3, [r6, #0]
 8002a6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a6e:	460c      	mov	r4, r1
 8002a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a74:	b10a      	cbz	r2, 8002a7a <_printf_common+0x26>
 8002a76:	3301      	adds	r3, #1
 8002a78:	6033      	str	r3, [r6, #0]
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	0699      	lsls	r1, r3, #26
 8002a7e:	bf42      	ittt	mi
 8002a80:	6833      	ldrmi	r3, [r6, #0]
 8002a82:	3302      	addmi	r3, #2
 8002a84:	6033      	strmi	r3, [r6, #0]
 8002a86:	6825      	ldr	r5, [r4, #0]
 8002a88:	f015 0506 	ands.w	r5, r5, #6
 8002a8c:	d106      	bne.n	8002a9c <_printf_common+0x48>
 8002a8e:	f104 0a19 	add.w	sl, r4, #25
 8002a92:	68e3      	ldr	r3, [r4, #12]
 8002a94:	6832      	ldr	r2, [r6, #0]
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	42ab      	cmp	r3, r5
 8002a9a:	dc28      	bgt.n	8002aee <_printf_common+0x9a>
 8002a9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002aa0:	1e13      	subs	r3, r2, #0
 8002aa2:	6822      	ldr	r2, [r4, #0]
 8002aa4:	bf18      	it	ne
 8002aa6:	2301      	movne	r3, #1
 8002aa8:	0692      	lsls	r2, r2, #26
 8002aaa:	d42d      	bmi.n	8002b08 <_printf_common+0xb4>
 8002aac:	4649      	mov	r1, r9
 8002aae:	4638      	mov	r0, r7
 8002ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ab4:	47c0      	blx	r8
 8002ab6:	3001      	adds	r0, #1
 8002ab8:	d020      	beq.n	8002afc <_printf_common+0xa8>
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	68e5      	ldr	r5, [r4, #12]
 8002abe:	f003 0306 	and.w	r3, r3, #6
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	bf18      	it	ne
 8002ac6:	2500      	movne	r5, #0
 8002ac8:	6832      	ldr	r2, [r6, #0]
 8002aca:	f04f 0600 	mov.w	r6, #0
 8002ace:	68a3      	ldr	r3, [r4, #8]
 8002ad0:	bf08      	it	eq
 8002ad2:	1aad      	subeq	r5, r5, r2
 8002ad4:	6922      	ldr	r2, [r4, #16]
 8002ad6:	bf08      	it	eq
 8002ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002adc:	4293      	cmp	r3, r2
 8002ade:	bfc4      	itt	gt
 8002ae0:	1a9b      	subgt	r3, r3, r2
 8002ae2:	18ed      	addgt	r5, r5, r3
 8002ae4:	341a      	adds	r4, #26
 8002ae6:	42b5      	cmp	r5, r6
 8002ae8:	d11a      	bne.n	8002b20 <_printf_common+0xcc>
 8002aea:	2000      	movs	r0, #0
 8002aec:	e008      	b.n	8002b00 <_printf_common+0xac>
 8002aee:	2301      	movs	r3, #1
 8002af0:	4652      	mov	r2, sl
 8002af2:	4649      	mov	r1, r9
 8002af4:	4638      	mov	r0, r7
 8002af6:	47c0      	blx	r8
 8002af8:	3001      	adds	r0, #1
 8002afa:	d103      	bne.n	8002b04 <_printf_common+0xb0>
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295
 8002b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b04:	3501      	adds	r5, #1
 8002b06:	e7c4      	b.n	8002a92 <_printf_common+0x3e>
 8002b08:	2030      	movs	r0, #48	; 0x30
 8002b0a:	18e1      	adds	r1, r4, r3
 8002b0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b16:	4422      	add	r2, r4
 8002b18:	3302      	adds	r3, #2
 8002b1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b1e:	e7c5      	b.n	8002aac <_printf_common+0x58>
 8002b20:	2301      	movs	r3, #1
 8002b22:	4622      	mov	r2, r4
 8002b24:	4649      	mov	r1, r9
 8002b26:	4638      	mov	r0, r7
 8002b28:	47c0      	blx	r8
 8002b2a:	3001      	adds	r0, #1
 8002b2c:	d0e6      	beq.n	8002afc <_printf_common+0xa8>
 8002b2e:	3601      	adds	r6, #1
 8002b30:	e7d9      	b.n	8002ae6 <_printf_common+0x92>
	...

08002b34 <_printf_i>:
 8002b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b38:	460c      	mov	r4, r1
 8002b3a:	7e27      	ldrb	r7, [r4, #24]
 8002b3c:	4691      	mov	r9, r2
 8002b3e:	2f78      	cmp	r7, #120	; 0x78
 8002b40:	4680      	mov	r8, r0
 8002b42:	469a      	mov	sl, r3
 8002b44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002b46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b4a:	d807      	bhi.n	8002b5c <_printf_i+0x28>
 8002b4c:	2f62      	cmp	r7, #98	; 0x62
 8002b4e:	d80a      	bhi.n	8002b66 <_printf_i+0x32>
 8002b50:	2f00      	cmp	r7, #0
 8002b52:	f000 80d9 	beq.w	8002d08 <_printf_i+0x1d4>
 8002b56:	2f58      	cmp	r7, #88	; 0x58
 8002b58:	f000 80a4 	beq.w	8002ca4 <_printf_i+0x170>
 8002b5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b64:	e03a      	b.n	8002bdc <_printf_i+0xa8>
 8002b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b6a:	2b15      	cmp	r3, #21
 8002b6c:	d8f6      	bhi.n	8002b5c <_printf_i+0x28>
 8002b6e:	a001      	add	r0, pc, #4	; (adr r0, 8002b74 <_printf_i+0x40>)
 8002b70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002b74:	08002bcd 	.word	0x08002bcd
 8002b78:	08002be1 	.word	0x08002be1
 8002b7c:	08002b5d 	.word	0x08002b5d
 8002b80:	08002b5d 	.word	0x08002b5d
 8002b84:	08002b5d 	.word	0x08002b5d
 8002b88:	08002b5d 	.word	0x08002b5d
 8002b8c:	08002be1 	.word	0x08002be1
 8002b90:	08002b5d 	.word	0x08002b5d
 8002b94:	08002b5d 	.word	0x08002b5d
 8002b98:	08002b5d 	.word	0x08002b5d
 8002b9c:	08002b5d 	.word	0x08002b5d
 8002ba0:	08002cef 	.word	0x08002cef
 8002ba4:	08002c11 	.word	0x08002c11
 8002ba8:	08002cd1 	.word	0x08002cd1
 8002bac:	08002b5d 	.word	0x08002b5d
 8002bb0:	08002b5d 	.word	0x08002b5d
 8002bb4:	08002d11 	.word	0x08002d11
 8002bb8:	08002b5d 	.word	0x08002b5d
 8002bbc:	08002c11 	.word	0x08002c11
 8002bc0:	08002b5d 	.word	0x08002b5d
 8002bc4:	08002b5d 	.word	0x08002b5d
 8002bc8:	08002cd9 	.word	0x08002cd9
 8002bcc:	680b      	ldr	r3, [r1, #0]
 8002bce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002bd2:	1d1a      	adds	r2, r3, #4
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	600a      	str	r2, [r1, #0]
 8002bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0a4      	b.n	8002d2a <_printf_i+0x1f6>
 8002be0:	6825      	ldr	r5, [r4, #0]
 8002be2:	6808      	ldr	r0, [r1, #0]
 8002be4:	062e      	lsls	r6, r5, #24
 8002be6:	f100 0304 	add.w	r3, r0, #4
 8002bea:	d50a      	bpl.n	8002c02 <_printf_i+0xce>
 8002bec:	6805      	ldr	r5, [r0, #0]
 8002bee:	600b      	str	r3, [r1, #0]
 8002bf0:	2d00      	cmp	r5, #0
 8002bf2:	da03      	bge.n	8002bfc <_printf_i+0xc8>
 8002bf4:	232d      	movs	r3, #45	; 0x2d
 8002bf6:	426d      	negs	r5, r5
 8002bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bfc:	230a      	movs	r3, #10
 8002bfe:	485e      	ldr	r0, [pc, #376]	; (8002d78 <_printf_i+0x244>)
 8002c00:	e019      	b.n	8002c36 <_printf_i+0x102>
 8002c02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002c06:	6805      	ldr	r5, [r0, #0]
 8002c08:	600b      	str	r3, [r1, #0]
 8002c0a:	bf18      	it	ne
 8002c0c:	b22d      	sxthne	r5, r5
 8002c0e:	e7ef      	b.n	8002bf0 <_printf_i+0xbc>
 8002c10:	680b      	ldr	r3, [r1, #0]
 8002c12:	6825      	ldr	r5, [r4, #0]
 8002c14:	1d18      	adds	r0, r3, #4
 8002c16:	6008      	str	r0, [r1, #0]
 8002c18:	0628      	lsls	r0, r5, #24
 8002c1a:	d501      	bpl.n	8002c20 <_printf_i+0xec>
 8002c1c:	681d      	ldr	r5, [r3, #0]
 8002c1e:	e002      	b.n	8002c26 <_printf_i+0xf2>
 8002c20:	0669      	lsls	r1, r5, #25
 8002c22:	d5fb      	bpl.n	8002c1c <_printf_i+0xe8>
 8002c24:	881d      	ldrh	r5, [r3, #0]
 8002c26:	2f6f      	cmp	r7, #111	; 0x6f
 8002c28:	bf0c      	ite	eq
 8002c2a:	2308      	moveq	r3, #8
 8002c2c:	230a      	movne	r3, #10
 8002c2e:	4852      	ldr	r0, [pc, #328]	; (8002d78 <_printf_i+0x244>)
 8002c30:	2100      	movs	r1, #0
 8002c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c36:	6866      	ldr	r6, [r4, #4]
 8002c38:	2e00      	cmp	r6, #0
 8002c3a:	bfa8      	it	ge
 8002c3c:	6821      	ldrge	r1, [r4, #0]
 8002c3e:	60a6      	str	r6, [r4, #8]
 8002c40:	bfa4      	itt	ge
 8002c42:	f021 0104 	bicge.w	r1, r1, #4
 8002c46:	6021      	strge	r1, [r4, #0]
 8002c48:	b90d      	cbnz	r5, 8002c4e <_printf_i+0x11a>
 8002c4a:	2e00      	cmp	r6, #0
 8002c4c:	d04d      	beq.n	8002cea <_printf_i+0x1b6>
 8002c4e:	4616      	mov	r6, r2
 8002c50:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c54:	fb03 5711 	mls	r7, r3, r1, r5
 8002c58:	5dc7      	ldrb	r7, [r0, r7]
 8002c5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c5e:	462f      	mov	r7, r5
 8002c60:	42bb      	cmp	r3, r7
 8002c62:	460d      	mov	r5, r1
 8002c64:	d9f4      	bls.n	8002c50 <_printf_i+0x11c>
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d10b      	bne.n	8002c82 <_printf_i+0x14e>
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	07df      	lsls	r7, r3, #31
 8002c6e:	d508      	bpl.n	8002c82 <_printf_i+0x14e>
 8002c70:	6923      	ldr	r3, [r4, #16]
 8002c72:	6861      	ldr	r1, [r4, #4]
 8002c74:	4299      	cmp	r1, r3
 8002c76:	bfde      	ittt	le
 8002c78:	2330      	movle	r3, #48	; 0x30
 8002c7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c82:	1b92      	subs	r2, r2, r6
 8002c84:	6122      	str	r2, [r4, #16]
 8002c86:	464b      	mov	r3, r9
 8002c88:	4621      	mov	r1, r4
 8002c8a:	4640      	mov	r0, r8
 8002c8c:	f8cd a000 	str.w	sl, [sp]
 8002c90:	aa03      	add	r2, sp, #12
 8002c92:	f7ff fedf 	bl	8002a54 <_printf_common>
 8002c96:	3001      	adds	r0, #1
 8002c98:	d14c      	bne.n	8002d34 <_printf_i+0x200>
 8002c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9e:	b004      	add	sp, #16
 8002ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ca4:	4834      	ldr	r0, [pc, #208]	; (8002d78 <_printf_i+0x244>)
 8002ca6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002caa:	680e      	ldr	r6, [r1, #0]
 8002cac:	6823      	ldr	r3, [r4, #0]
 8002cae:	f856 5b04 	ldr.w	r5, [r6], #4
 8002cb2:	061f      	lsls	r7, r3, #24
 8002cb4:	600e      	str	r6, [r1, #0]
 8002cb6:	d514      	bpl.n	8002ce2 <_printf_i+0x1ae>
 8002cb8:	07d9      	lsls	r1, r3, #31
 8002cba:	bf44      	itt	mi
 8002cbc:	f043 0320 	orrmi.w	r3, r3, #32
 8002cc0:	6023      	strmi	r3, [r4, #0]
 8002cc2:	b91d      	cbnz	r5, 8002ccc <_printf_i+0x198>
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	f023 0320 	bic.w	r3, r3, #32
 8002cca:	6023      	str	r3, [r4, #0]
 8002ccc:	2310      	movs	r3, #16
 8002cce:	e7af      	b.n	8002c30 <_printf_i+0xfc>
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	f043 0320 	orr.w	r3, r3, #32
 8002cd6:	6023      	str	r3, [r4, #0]
 8002cd8:	2378      	movs	r3, #120	; 0x78
 8002cda:	4828      	ldr	r0, [pc, #160]	; (8002d7c <_printf_i+0x248>)
 8002cdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ce0:	e7e3      	b.n	8002caa <_printf_i+0x176>
 8002ce2:	065e      	lsls	r6, r3, #25
 8002ce4:	bf48      	it	mi
 8002ce6:	b2ad      	uxthmi	r5, r5
 8002ce8:	e7e6      	b.n	8002cb8 <_printf_i+0x184>
 8002cea:	4616      	mov	r6, r2
 8002cec:	e7bb      	b.n	8002c66 <_printf_i+0x132>
 8002cee:	680b      	ldr	r3, [r1, #0]
 8002cf0:	6826      	ldr	r6, [r4, #0]
 8002cf2:	1d1d      	adds	r5, r3, #4
 8002cf4:	6960      	ldr	r0, [r4, #20]
 8002cf6:	600d      	str	r5, [r1, #0]
 8002cf8:	0635      	lsls	r5, r6, #24
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	d501      	bpl.n	8002d02 <_printf_i+0x1ce>
 8002cfe:	6018      	str	r0, [r3, #0]
 8002d00:	e002      	b.n	8002d08 <_printf_i+0x1d4>
 8002d02:	0671      	lsls	r1, r6, #25
 8002d04:	d5fb      	bpl.n	8002cfe <_printf_i+0x1ca>
 8002d06:	8018      	strh	r0, [r3, #0]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	4616      	mov	r6, r2
 8002d0c:	6123      	str	r3, [r4, #16]
 8002d0e:	e7ba      	b.n	8002c86 <_printf_i+0x152>
 8002d10:	680b      	ldr	r3, [r1, #0]
 8002d12:	1d1a      	adds	r2, r3, #4
 8002d14:	600a      	str	r2, [r1, #0]
 8002d16:	681e      	ldr	r6, [r3, #0]
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4630      	mov	r0, r6
 8002d1c:	6862      	ldr	r2, [r4, #4]
 8002d1e:	f000 f82f 	bl	8002d80 <memchr>
 8002d22:	b108      	cbz	r0, 8002d28 <_printf_i+0x1f4>
 8002d24:	1b80      	subs	r0, r0, r6
 8002d26:	6060      	str	r0, [r4, #4]
 8002d28:	6863      	ldr	r3, [r4, #4]
 8002d2a:	6123      	str	r3, [r4, #16]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d32:	e7a8      	b.n	8002c86 <_printf_i+0x152>
 8002d34:	4632      	mov	r2, r6
 8002d36:	4649      	mov	r1, r9
 8002d38:	4640      	mov	r0, r8
 8002d3a:	6923      	ldr	r3, [r4, #16]
 8002d3c:	47d0      	blx	sl
 8002d3e:	3001      	adds	r0, #1
 8002d40:	d0ab      	beq.n	8002c9a <_printf_i+0x166>
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	079b      	lsls	r3, r3, #30
 8002d46:	d413      	bmi.n	8002d70 <_printf_i+0x23c>
 8002d48:	68e0      	ldr	r0, [r4, #12]
 8002d4a:	9b03      	ldr	r3, [sp, #12]
 8002d4c:	4298      	cmp	r0, r3
 8002d4e:	bfb8      	it	lt
 8002d50:	4618      	movlt	r0, r3
 8002d52:	e7a4      	b.n	8002c9e <_printf_i+0x16a>
 8002d54:	2301      	movs	r3, #1
 8002d56:	4632      	mov	r2, r6
 8002d58:	4649      	mov	r1, r9
 8002d5a:	4640      	mov	r0, r8
 8002d5c:	47d0      	blx	sl
 8002d5e:	3001      	adds	r0, #1
 8002d60:	d09b      	beq.n	8002c9a <_printf_i+0x166>
 8002d62:	3501      	adds	r5, #1
 8002d64:	68e3      	ldr	r3, [r4, #12]
 8002d66:	9903      	ldr	r1, [sp, #12]
 8002d68:	1a5b      	subs	r3, r3, r1
 8002d6a:	42ab      	cmp	r3, r5
 8002d6c:	dcf2      	bgt.n	8002d54 <_printf_i+0x220>
 8002d6e:	e7eb      	b.n	8002d48 <_printf_i+0x214>
 8002d70:	2500      	movs	r5, #0
 8002d72:	f104 0619 	add.w	r6, r4, #25
 8002d76:	e7f5      	b.n	8002d64 <_printf_i+0x230>
 8002d78:	0800303d 	.word	0x0800303d
 8002d7c:	0800304e 	.word	0x0800304e

08002d80 <memchr>:
 8002d80:	4603      	mov	r3, r0
 8002d82:	b510      	push	{r4, lr}
 8002d84:	b2c9      	uxtb	r1, r1
 8002d86:	4402      	add	r2, r0
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	d101      	bne.n	8002d92 <memchr+0x12>
 8002d8e:	2000      	movs	r0, #0
 8002d90:	e003      	b.n	8002d9a <memchr+0x1a>
 8002d92:	7804      	ldrb	r4, [r0, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	428c      	cmp	r4, r1
 8002d98:	d1f6      	bne.n	8002d88 <memchr+0x8>
 8002d9a:	bd10      	pop	{r4, pc}

08002d9c <memcpy>:
 8002d9c:	440a      	add	r2, r1
 8002d9e:	4291      	cmp	r1, r2
 8002da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002da4:	d100      	bne.n	8002da8 <memcpy+0xc>
 8002da6:	4770      	bx	lr
 8002da8:	b510      	push	{r4, lr}
 8002daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dae:	4291      	cmp	r1, r2
 8002db0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002db4:	d1f9      	bne.n	8002daa <memcpy+0xe>
 8002db6:	bd10      	pop	{r4, pc}

08002db8 <memmove>:
 8002db8:	4288      	cmp	r0, r1
 8002dba:	b510      	push	{r4, lr}
 8002dbc:	eb01 0402 	add.w	r4, r1, r2
 8002dc0:	d902      	bls.n	8002dc8 <memmove+0x10>
 8002dc2:	4284      	cmp	r4, r0
 8002dc4:	4623      	mov	r3, r4
 8002dc6:	d807      	bhi.n	8002dd8 <memmove+0x20>
 8002dc8:	1e43      	subs	r3, r0, #1
 8002dca:	42a1      	cmp	r1, r4
 8002dcc:	d008      	beq.n	8002de0 <memmove+0x28>
 8002dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002dd6:	e7f8      	b.n	8002dca <memmove+0x12>
 8002dd8:	4601      	mov	r1, r0
 8002dda:	4402      	add	r2, r0
 8002ddc:	428a      	cmp	r2, r1
 8002dde:	d100      	bne.n	8002de2 <memmove+0x2a>
 8002de0:	bd10      	pop	{r4, pc}
 8002de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002dea:	e7f7      	b.n	8002ddc <memmove+0x24>

08002dec <_free_r>:
 8002dec:	b538      	push	{r3, r4, r5, lr}
 8002dee:	4605      	mov	r5, r0
 8002df0:	2900      	cmp	r1, #0
 8002df2:	d043      	beq.n	8002e7c <_free_r+0x90>
 8002df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002df8:	1f0c      	subs	r4, r1, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bfb8      	it	lt
 8002dfe:	18e4      	addlt	r4, r4, r3
 8002e00:	f000 f8d0 	bl	8002fa4 <__malloc_lock>
 8002e04:	4a1e      	ldr	r2, [pc, #120]	; (8002e80 <_free_r+0x94>)
 8002e06:	6813      	ldr	r3, [r2, #0]
 8002e08:	4610      	mov	r0, r2
 8002e0a:	b933      	cbnz	r3, 8002e1a <_free_r+0x2e>
 8002e0c:	6063      	str	r3, [r4, #4]
 8002e0e:	6014      	str	r4, [r2, #0]
 8002e10:	4628      	mov	r0, r5
 8002e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e16:	f000 b8cb 	b.w	8002fb0 <__malloc_unlock>
 8002e1a:	42a3      	cmp	r3, r4
 8002e1c:	d90a      	bls.n	8002e34 <_free_r+0x48>
 8002e1e:	6821      	ldr	r1, [r4, #0]
 8002e20:	1862      	adds	r2, r4, r1
 8002e22:	4293      	cmp	r3, r2
 8002e24:	bf01      	itttt	eq
 8002e26:	681a      	ldreq	r2, [r3, #0]
 8002e28:	685b      	ldreq	r3, [r3, #4]
 8002e2a:	1852      	addeq	r2, r2, r1
 8002e2c:	6022      	streq	r2, [r4, #0]
 8002e2e:	6063      	str	r3, [r4, #4]
 8002e30:	6004      	str	r4, [r0, #0]
 8002e32:	e7ed      	b.n	8002e10 <_free_r+0x24>
 8002e34:	461a      	mov	r2, r3
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	b10b      	cbz	r3, 8002e3e <_free_r+0x52>
 8002e3a:	42a3      	cmp	r3, r4
 8002e3c:	d9fa      	bls.n	8002e34 <_free_r+0x48>
 8002e3e:	6811      	ldr	r1, [r2, #0]
 8002e40:	1850      	adds	r0, r2, r1
 8002e42:	42a0      	cmp	r0, r4
 8002e44:	d10b      	bne.n	8002e5e <_free_r+0x72>
 8002e46:	6820      	ldr	r0, [r4, #0]
 8002e48:	4401      	add	r1, r0
 8002e4a:	1850      	adds	r0, r2, r1
 8002e4c:	4283      	cmp	r3, r0
 8002e4e:	6011      	str	r1, [r2, #0]
 8002e50:	d1de      	bne.n	8002e10 <_free_r+0x24>
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4401      	add	r1, r0
 8002e58:	6011      	str	r1, [r2, #0]
 8002e5a:	6053      	str	r3, [r2, #4]
 8002e5c:	e7d8      	b.n	8002e10 <_free_r+0x24>
 8002e5e:	d902      	bls.n	8002e66 <_free_r+0x7a>
 8002e60:	230c      	movs	r3, #12
 8002e62:	602b      	str	r3, [r5, #0]
 8002e64:	e7d4      	b.n	8002e10 <_free_r+0x24>
 8002e66:	6820      	ldr	r0, [r4, #0]
 8002e68:	1821      	adds	r1, r4, r0
 8002e6a:	428b      	cmp	r3, r1
 8002e6c:	bf01      	itttt	eq
 8002e6e:	6819      	ldreq	r1, [r3, #0]
 8002e70:	685b      	ldreq	r3, [r3, #4]
 8002e72:	1809      	addeq	r1, r1, r0
 8002e74:	6021      	streq	r1, [r4, #0]
 8002e76:	6063      	str	r3, [r4, #4]
 8002e78:	6054      	str	r4, [r2, #4]
 8002e7a:	e7c9      	b.n	8002e10 <_free_r+0x24>
 8002e7c:	bd38      	pop	{r3, r4, r5, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000094 	.word	0x20000094

08002e84 <_malloc_r>:
 8002e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e86:	1ccd      	adds	r5, r1, #3
 8002e88:	f025 0503 	bic.w	r5, r5, #3
 8002e8c:	3508      	adds	r5, #8
 8002e8e:	2d0c      	cmp	r5, #12
 8002e90:	bf38      	it	cc
 8002e92:	250c      	movcc	r5, #12
 8002e94:	2d00      	cmp	r5, #0
 8002e96:	4606      	mov	r6, r0
 8002e98:	db01      	blt.n	8002e9e <_malloc_r+0x1a>
 8002e9a:	42a9      	cmp	r1, r5
 8002e9c:	d903      	bls.n	8002ea6 <_malloc_r+0x22>
 8002e9e:	230c      	movs	r3, #12
 8002ea0:	6033      	str	r3, [r6, #0]
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ea6:	f000 f87d 	bl	8002fa4 <__malloc_lock>
 8002eaa:	4921      	ldr	r1, [pc, #132]	; (8002f30 <_malloc_r+0xac>)
 8002eac:	680a      	ldr	r2, [r1, #0]
 8002eae:	4614      	mov	r4, r2
 8002eb0:	b99c      	cbnz	r4, 8002eda <_malloc_r+0x56>
 8002eb2:	4f20      	ldr	r7, [pc, #128]	; (8002f34 <_malloc_r+0xb0>)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	b923      	cbnz	r3, 8002ec2 <_malloc_r+0x3e>
 8002eb8:	4621      	mov	r1, r4
 8002eba:	4630      	mov	r0, r6
 8002ebc:	f000 f862 	bl	8002f84 <_sbrk_r>
 8002ec0:	6038      	str	r0, [r7, #0]
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	f000 f85d 	bl	8002f84 <_sbrk_r>
 8002eca:	1c43      	adds	r3, r0, #1
 8002ecc:	d123      	bne.n	8002f16 <_malloc_r+0x92>
 8002ece:	230c      	movs	r3, #12
 8002ed0:	4630      	mov	r0, r6
 8002ed2:	6033      	str	r3, [r6, #0]
 8002ed4:	f000 f86c 	bl	8002fb0 <__malloc_unlock>
 8002ed8:	e7e3      	b.n	8002ea2 <_malloc_r+0x1e>
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	1b5b      	subs	r3, r3, r5
 8002ede:	d417      	bmi.n	8002f10 <_malloc_r+0x8c>
 8002ee0:	2b0b      	cmp	r3, #11
 8002ee2:	d903      	bls.n	8002eec <_malloc_r+0x68>
 8002ee4:	6023      	str	r3, [r4, #0]
 8002ee6:	441c      	add	r4, r3
 8002ee8:	6025      	str	r5, [r4, #0]
 8002eea:	e004      	b.n	8002ef6 <_malloc_r+0x72>
 8002eec:	6863      	ldr	r3, [r4, #4]
 8002eee:	42a2      	cmp	r2, r4
 8002ef0:	bf0c      	ite	eq
 8002ef2:	600b      	streq	r3, [r1, #0]
 8002ef4:	6053      	strne	r3, [r2, #4]
 8002ef6:	4630      	mov	r0, r6
 8002ef8:	f000 f85a 	bl	8002fb0 <__malloc_unlock>
 8002efc:	f104 000b 	add.w	r0, r4, #11
 8002f00:	1d23      	adds	r3, r4, #4
 8002f02:	f020 0007 	bic.w	r0, r0, #7
 8002f06:	1ac2      	subs	r2, r0, r3
 8002f08:	d0cc      	beq.n	8002ea4 <_malloc_r+0x20>
 8002f0a:	1a1b      	subs	r3, r3, r0
 8002f0c:	50a3      	str	r3, [r4, r2]
 8002f0e:	e7c9      	b.n	8002ea4 <_malloc_r+0x20>
 8002f10:	4622      	mov	r2, r4
 8002f12:	6864      	ldr	r4, [r4, #4]
 8002f14:	e7cc      	b.n	8002eb0 <_malloc_r+0x2c>
 8002f16:	1cc4      	adds	r4, r0, #3
 8002f18:	f024 0403 	bic.w	r4, r4, #3
 8002f1c:	42a0      	cmp	r0, r4
 8002f1e:	d0e3      	beq.n	8002ee8 <_malloc_r+0x64>
 8002f20:	1a21      	subs	r1, r4, r0
 8002f22:	4630      	mov	r0, r6
 8002f24:	f000 f82e 	bl	8002f84 <_sbrk_r>
 8002f28:	3001      	adds	r0, #1
 8002f2a:	d1dd      	bne.n	8002ee8 <_malloc_r+0x64>
 8002f2c:	e7cf      	b.n	8002ece <_malloc_r+0x4a>
 8002f2e:	bf00      	nop
 8002f30:	20000094 	.word	0x20000094
 8002f34:	20000098 	.word	0x20000098

08002f38 <_realloc_r>:
 8002f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3a:	4607      	mov	r7, r0
 8002f3c:	4614      	mov	r4, r2
 8002f3e:	460e      	mov	r6, r1
 8002f40:	b921      	cbnz	r1, 8002f4c <_realloc_r+0x14>
 8002f42:	4611      	mov	r1, r2
 8002f44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f48:	f7ff bf9c 	b.w	8002e84 <_malloc_r>
 8002f4c:	b922      	cbnz	r2, 8002f58 <_realloc_r+0x20>
 8002f4e:	f7ff ff4d 	bl	8002dec <_free_r>
 8002f52:	4625      	mov	r5, r4
 8002f54:	4628      	mov	r0, r5
 8002f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f58:	f000 f830 	bl	8002fbc <_malloc_usable_size_r>
 8002f5c:	42a0      	cmp	r0, r4
 8002f5e:	d20f      	bcs.n	8002f80 <_realloc_r+0x48>
 8002f60:	4621      	mov	r1, r4
 8002f62:	4638      	mov	r0, r7
 8002f64:	f7ff ff8e 	bl	8002e84 <_malloc_r>
 8002f68:	4605      	mov	r5, r0
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d0f2      	beq.n	8002f54 <_realloc_r+0x1c>
 8002f6e:	4631      	mov	r1, r6
 8002f70:	4622      	mov	r2, r4
 8002f72:	f7ff ff13 	bl	8002d9c <memcpy>
 8002f76:	4631      	mov	r1, r6
 8002f78:	4638      	mov	r0, r7
 8002f7a:	f7ff ff37 	bl	8002dec <_free_r>
 8002f7e:	e7e9      	b.n	8002f54 <_realloc_r+0x1c>
 8002f80:	4635      	mov	r5, r6
 8002f82:	e7e7      	b.n	8002f54 <_realloc_r+0x1c>

08002f84 <_sbrk_r>:
 8002f84:	b538      	push	{r3, r4, r5, lr}
 8002f86:	2300      	movs	r3, #0
 8002f88:	4d05      	ldr	r5, [pc, #20]	; (8002fa0 <_sbrk_r+0x1c>)
 8002f8a:	4604      	mov	r4, r0
 8002f8c:	4608      	mov	r0, r1
 8002f8e:	602b      	str	r3, [r5, #0]
 8002f90:	f7fd fd2e 	bl	80009f0 <_sbrk>
 8002f94:	1c43      	adds	r3, r0, #1
 8002f96:	d102      	bne.n	8002f9e <_sbrk_r+0x1a>
 8002f98:	682b      	ldr	r3, [r5, #0]
 8002f9a:	b103      	cbz	r3, 8002f9e <_sbrk_r+0x1a>
 8002f9c:	6023      	str	r3, [r4, #0]
 8002f9e:	bd38      	pop	{r3, r4, r5, pc}
 8002fa0:	20000144 	.word	0x20000144

08002fa4 <__malloc_lock>:
 8002fa4:	4801      	ldr	r0, [pc, #4]	; (8002fac <__malloc_lock+0x8>)
 8002fa6:	f000 b811 	b.w	8002fcc <__retarget_lock_acquire_recursive>
 8002faa:	bf00      	nop
 8002fac:	2000014c 	.word	0x2000014c

08002fb0 <__malloc_unlock>:
 8002fb0:	4801      	ldr	r0, [pc, #4]	; (8002fb8 <__malloc_unlock+0x8>)
 8002fb2:	f000 b80c 	b.w	8002fce <__retarget_lock_release_recursive>
 8002fb6:	bf00      	nop
 8002fb8:	2000014c 	.word	0x2000014c

08002fbc <_malloc_usable_size_r>:
 8002fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fc0:	1f18      	subs	r0, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	bfbc      	itt	lt
 8002fc6:	580b      	ldrlt	r3, [r1, r0]
 8002fc8:	18c0      	addlt	r0, r0, r3
 8002fca:	4770      	bx	lr

08002fcc <__retarget_lock_acquire_recursive>:
 8002fcc:	4770      	bx	lr

08002fce <__retarget_lock_release_recursive>:
 8002fce:	4770      	bx	lr

08002fd0 <_init>:
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd2:	bf00      	nop
 8002fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd6:	bc08      	pop	{r3}
 8002fd8:	469e      	mov	lr, r3
 8002fda:	4770      	bx	lr

08002fdc <_fini>:
 8002fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fde:	bf00      	nop
 8002fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe2:	bc08      	pop	{r3}
 8002fe4:	469e      	mov	lr, r3
 8002fe6:	4770      	bx	lr
